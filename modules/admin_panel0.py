import pathlib
import logging
from typing import Dict, List
from typing import Dict, List, Tuple
from telebot import types

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self, bot_instance=None):
        self.custom_lists_path = pathlib.Path("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_—Å–ø–∏—Å–∫–∏")
        self.custom_lists_path.mkdir(exist_ok=True)
        self.awaiting_input_users: Dict[int, str] = {}  # user_id -> —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
        self.bot = bot_instance
        print("‚úÖ AdminPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.bot = bot_instance
        print(f"‚úÖ Bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ AdminPanel: {self.bot is not None}")
    
    def is_awaiting_input(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return message.chat.id in self.awaiting_input_users
    
    def is_awaiting_excel(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç Excel —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message.chat.id
        return chat_id in self.awaiting_input_users and self.awaiting_input_users[chat_id].startswith('excel_file:')
    
    def show_admin_panel_sync(self, call):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å pyTelegramBotAPI"""
        print(f"üîç DEBUG show_admin_panel_sync: bot={self.bot is not None}")
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
            
        keyboard = [
            [types.InlineKeyboardButton("‚ûï –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –°–ü–ò–°–û–ö", callback_data="admin_create_list")],
            [types.InlineKeyboardButton("üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò", callback_data="admin_manage_lists")],
            [types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="admin_back")]
        ]
        reply_markup = types.InlineKeyboardMarkup(keyboard)
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üë®‚Äçüíª –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        print("‚úÖ DEBUG: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞")
    
    def create_new_list_start_sync(self, call):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG create_new_list_start_sync: –≤—ã–∑–≤–∞–Ω, chat_id={call.message.chat.id}")
        print(f"üîç DEBUG: self.bot = {self.bot is not None}")
        
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set - –í–û–¢ –ü–†–û–ë–õ–ï–ú–ê!")
            return
            
        chat_id = call.message.chat.id
        self.awaiting_input_users[chat_id] = 'list_name'
        print(f"‚úÖ DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_input –¥–ª—è {chat_id}")
        
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìù –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ü–ò–°–ö–ê\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:"
            )
            print("‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_list_name_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG handle_list_name_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or self.awaiting_input_users[chat_id] != 'list_name':
            print(f"‚ùå DEBUG: –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç {chat_id}")
            return
            
        list_name = message.text.strip()
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{list_name}'")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not list_name or len(list_name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        success = self._create_list_structure(list_name)
        
        if success:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞
            self.awaiting_input_users[chat_id] = f'excel_file:{list_name}'
            self.bot.send_message(
                chat_id,
                f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_—Å–ø–∏—Å–∫–∏/{list_name}/\n"
                f"‚Ä¢ ‚îú‚îÄ‚îÄ –ó–∞–∫–∞–∑—ã/\n"
                f"‚Ä¢ ‚îú‚îÄ‚îÄ –£—á–µ—Ç/\n"
                f"‚Ä¢ ‚îú‚îÄ‚îÄ –§–æ—Ç–æ/\n"
                f"‚Ä¢ ‚îî‚îÄ‚îÄ cache/\n\n"
                f"üì§ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏ (2 –∫–æ–ª–æ–Ω–∫–∏: —Ä–∞–±–æ—Ç–∞, –Ω–æ—Ä–º–æ—á–∞—Å—ã)"
            )
            print(f"‚úÖ DEBUG: –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ–º Excel —Ñ–∞–π–ª")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
            del self.awaiting_input_users[chat_id]
            print("‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞")
    
    def handle_excel_file_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        print(f"üîç DEBUG handle_excel_file_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or not self.awaiting_input_users[chat_id].startswith('excel_file:'):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞ –∏–∑ awaiting_input_users
        list_name = self.awaiting_input_users[chat_id].replace('excel_file:', '')
                
        if not list_name:
            self.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            del self.awaiting_input_users[chat_id]
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            if message.document:
                file_info = self.bot.get_file(message.document.file_id)
                downloaded_file = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å–ø–∏—Å–∫–∞
                list_path = self.custom_lists_path / list_name
                excel_file_path = list_path / f"works_list_{list_name.lower()}.xlsx"
                
                with open(excel_file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
                
                del self.awaiting_input_users[chat_id]
                
                self.bot.send_message(
                    chat_id,
                    f"‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}'!\n\n"
                    f"üìä –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_file_path}\n\n"
                    f"üîÑ –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                )
                print(f"‚úÖ DEBUG: Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è '{list_name}'")
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"Error handling Excel file: {e}")
            del self.awaiting_input_users[chat_id]

    def _create_list_structure(self, list_name: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            base_path = self.custom_lists_path / list_name
            folders = ["–ó–∞–∫–∞–∑—ã", "–£—á–µ—Ç", "–§–æ—Ç–æ", "cache"]
            
            for folder in folders:
                (base_path / folder).mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π Excel —Ñ–∞–π–ª (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º)
            excel_path = base_path / f"works_list_{list_name.lower()}.xlsx"
            excel_path.touch()
            
            return True
        except Exception as e:
            logger.error(f"Error creating list structure: {e}")
            return False
    

    def load_works_from_custom_list(self, list_name: str) -> List[Tuple[str, float]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            list_path = self.custom_lists_path / list_name
            excel_file = list_path / f"works_list_{list_name.lower()}.xlsx"
            
            if not excel_file.exists():
                print(f"‚ùå DEBUG: –§–∞–π–ª {excel_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞
            import pandas as pd
            df = pd.read_excel(excel_file)
            
            print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω DataFrame —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏")
            print(f"üîç DEBUG: –ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")
            
            works = []
            for index, row in df.iterrows():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º iloc –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                if len(row) >= 2 and pd.notna(row.iloc[0]) and pd.notna(row.iloc[1]):
                    work_name = str(row.iloc[0]).strip()
                    try:
                        hours = float(row.iloc[1])
                        works.append((work_name, hours))
                        print(f"‚úÖ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ '{work_name}' - {hours} —á")
                    except (ValueError, TypeError) as e:
                        print(f"‚ö†Ô∏è DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
                        continue
                else:
                    print(f"‚ö†Ô∏è DEBUG: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {index} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                        
            print(f"‚úÖ DEBUG: –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(works)} —Ä–∞–±–æ—Ç")
            return works
            
        except Exception as e:
            logger.error(f"Error loading works from custom list {list_name}: {e}")
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []

    def get_available_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤"""
        print(f"üîç DEBUG get_available_lists: –ø—É—Ç—å={self.custom_lists_path}")
        print(f"üîç DEBUG: –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {self.custom_lists_path.exists()}")
        lists = []
        for folder in self.custom_lists_path.iterdir():
            print(f"üîç DEBUG: –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder.name} (is_dir: {folder.is_dir()})")
            if folder.is_dir():
                lists.append(folder.name)
        print(f"üîç DEBUG: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–∫–∏: {lists}")
        return lists

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel = AdminPanel()
