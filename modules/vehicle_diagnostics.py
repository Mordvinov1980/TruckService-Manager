# modules/vehicle_diagnostics.py
import obd
import logging
from typing import Dict, List, Optional
from datetime import datetime

class VehicleDiagnostics:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ ELM327"""
    
    def __init__(self):
        self.connection = None
        self.logger = logging.getLogger(__name__)
        self.is_connected = False
    
    def connect(self, port: str = None) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ELM327 –∞–¥–∞–ø—Ç–µ—Ä—É
        port: COM –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'COM3' –Ω–∞ Windows)
        """
        try:
            self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ELM327...")
            
            if port:
                self.connection = obd.OBD(portstr=port)
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.connection = obd.OBD()
            
            self.is_connected = self.connection.is_connected()
            
            if self.is_connected:
                self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ELM327")
                protocol = self.connection.protocol_name()
                self.logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ELM327")
                
            return self.is_connected
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.is_connected = False
            return False
    
    def get_vehicle_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        if not self.is_connected:
            return {"error": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–∞–ø—Ç–µ—Ä—É"}
        
        info = {
            "timestamp": datetime.now().isoformat(),
            "vin": "N/A",
            "protocol": self.connection.protocol_name() if self.connection else "N/A",
            "supported_commands": []
        }
        
        # –ß—Ç–µ–Ω–∏–µ VIN
        try:
            response = self.connection.query(obd.commands.VIN)
            if not response.is_null():
                info["vin"] = str(response.value)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å VIN: {e}")
        
        return info
    
    def read_live_data(self) -> Dict:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.is_connected:
            return {"error": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–∞–ø—Ç–µ—Ä—É"}
        
        data = {
            "timestamp": datetime.now().isoformat(),
            "parameters": {}
        }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤
        commands = {
            "rpm": obd.commands.RPM,
            "speed": obd.commands.SPEED,
            "coolant_temp": obd.commands.COOLANT_TEMP,
            "engine_load": obd.commands.ENGINE_LOAD,
            "fuel_pressure": obd.commands.FUEL_PRESSURE,
            "intake_pressure": obd.commands.INTAKE_PRESSURE,
            "maf": obd.commands.MAF,
            "throttle_pos": obd.commands.THROTTLE_POS,
            "engine_runtime": obd.commands.RUN_TIME,
            "fuel_level": obd.commands.FUEL_LEVEL
        }
        
        for param_name, command in commands.items():
            try:
                response = self.connection.query(command)
                if not response.is_null():
                    data["parameters"][param_name] = {
                        'value': float(response.value.magnitude),
                        'units': str(response.value.units)
                    }
            except Exception as e:
                self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {param_name}: {e}")
        
        return data
    
    def read_dtc_codes(self) -> Dict:
        """–ß—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫"""
        if not self.is_connected:
            return {"error": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–∞–ø—Ç–µ—Ä—É"}
        
        try:
            response = self.connection.query(obd.commands.GET_DTC)
            if not response.is_null():
                dtc_codes = response.value
                return {
                    "count": len(dtc_codes),
                    "codes": dtc_codes,
                    "timestamp": datetime.now().isoformat()
                }
            return {"count": 0, "codes": [], "timestamp": datetime.now().isoformat()}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DTC: {e}")
            return {"error": str(e)}
    
    def clear_dtc_codes(self) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫"""
        if not self.is_connected:
            return {"error": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–∞–ø—Ç–µ—Ä—É"}
        
        try:
            response = self.connection.query(obd.commands.CLEAR_DTC)
            success = not response.is_null()
            return {
                "success": success,
                "message": "–ö–æ–¥—ã –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω—ã" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–¥—ã –æ—à–∏–±–æ–∫",
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ DTC: {e}")
            return {"error": str(e)}
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            self.connection.close()
            self.is_connected = False
            self.logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ELM327 –∑–∞–∫—Ä—ã—Ç–æ")

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def test_diagnostics():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –ú–û–î–£–õ–Ø")
    print("=" * 50)
    
    diag = VehicleDiagnostics()
    
    if diag.connect():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ELM327 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        vehicle_info = diag.get_vehicle_info()
        print(f"üöó VIN: {vehicle_info.get('vin')}")
        print(f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {vehicle_info.get('protocol')}")
        
        # –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        live_data = diag.read_live_data()
        print("\nüìä –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:")
        for param, value_data in live_data.get("parameters", {}).items():
            print(f"   {param}: {value_data['value']} {value_data['units']}")
        
        # –ö–æ–¥—ã –æ—à–∏–±–æ–∫
        dtc_info = diag.read_dtc_codes()
        if "codes" in dtc_info and dtc_info["codes"]:
            print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ö–û–î–´ –û–®–ò–ë–û–ö ({dtc_info['count']}):")
            for code in dtc_info["codes"]:
                print(f"   {code}")
        else:
            print("\n‚úÖ –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        diag.disconnect()
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ELM327")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∞–¥–∞–ø—Ç–µ—Ä –∫ OBD2 —Ä–∞–∑—ä–µ–º—É")
        print("   - –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –∑–∞–∂–∏–≥–∞–Ω–∏–µ")
        print("   - –°–æ–ø—Ä—è–∂–µ–Ω –ª–∏ –∞–¥–∞–ø—Ç–µ—Ä —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º")

if __name__ == "__main__":
    test_diagnostics()