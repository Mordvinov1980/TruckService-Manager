import pathlib
import logging
import json
import re  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò ID –®–ê–ë–õ–û–ù–û–í
from typing import Dict, List, Tuple
from telebot import types

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self, bot_instance=None):
        self.custom_lists_path = pathlib.Path("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_—Å–ø–∏—Å–∫–∏")
        self.custom_lists_path.mkdir(exist_ok=True)
        self.header_templates_path = pathlib.Path("–®–∞–±–ª–æ–Ω—ã") / "header_templates"
        self.header_templates_path.mkdir(parents=True, exist_ok=True)
        self.awaiting_input_users: Dict[int, str] = {}  # user_id -> —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
        self.bot = bot_instance
        print("‚úÖ AdminPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.bot = bot_instance
        print(f"‚úÖ Bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ AdminPanel: {self.bot is not None}")
      
    def is_awaiting_excel(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç Excel —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message.chat.id
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –¢–ò–ü add_excel_file
        return (chat_id in self.awaiting_input_users and 
                (self.awaiting_input_users[chat_id].startswith('excel_file:') or
                 self.awaiting_input_users[chat_id].startswith('add_excel_file:')))    
    
    def is_awaiting_input(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return message.chat.id in self.awaiting_input_users

    def show_admin_panel_sync(self, call):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
        print(f"üîç DEBUG show_admin_panel_sync: bot={self.bot is not None}")
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
        
        keyboard = [
            [types.InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –°–ü–ò–°–û–ö", callback_data="admin_add_list")],
            [types.InlineKeyboardButton("üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò", callback_data="admin_manage_lists")],
            [types.InlineKeyboardButton("üè¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò", callback_data="admin_manage_templates")],
            [types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="admin_back")]
        ]
        reply_markup = types.InlineKeyboardMarkup(keyboard)
    
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üë®‚Äçüíª –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        print("‚úÖ DEBUG: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞")

    def show_templates_management_sync(self, call):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —à–∞–ø–æ–∫"""
        if not self.bot:
            return
            
        templates = self._load_header_templates()
        
        keyboard = []
        
        for template_id, template_data in templates.items():
            keyboard.append([
                types.InlineKeyboardButton(
                    f"üìÑ {template_data['name']}", 
                    callback_data=f"admin_view_template:{template_id}"
                )
            ])
        
        keyboard.append([
            types.InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –®–ê–ë–õ–û–ù", callback_data="admin_add_template"),
            types.InlineKeyboardButton("üîÑ –û–ë–ù–û–í–ò–¢–¨ –°–ü–ò–°–û–ö", callback_data="admin_refresh_templates")
        ])
        keyboard.append([
            types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="admin_back_to_main")
        ])
        
        reply_markup = types.InlineKeyboardMarkup(keyboard)
        
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üè¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò –®–ê–ü–û–ö\n\n–î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def _load_header_templates(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —à–∞–ø–æ–∫"""
        templates = {}
        try:
            template_files = list(self.header_templates_path.glob("*.json"))
            for template_file in template_files:
                try:
                    with open(template_file, 'r', encoding='utf-8') as f:
                        template_data = json.load(f)
                        templates[template_data['id']] = template_data
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_file}: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        
        return templates

    def _save_header_template(self, template_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —à–∞–ø–∫–∏"""
        try:
            template_file = self.header_templates_path / f"{template_data['id']}.json"
            with open(template_file, 'w', encoding='utf-8') as f:
                json.dump(template_data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return False

    def handle_add_template_start_sync(self, call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        print(f"üîç DEBUG: handle_add_template_start_sync –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            return
            
        chat_id = call.message.chat.id
        print(f"üîç DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º awaiting_input_users[{chat_id}] = 'add_template_id'")
        self.awaiting_input_users[chat_id] = 'add_template_id'
        print(f"üîç DEBUG: awaiting_input_users –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.awaiting_input_users}")
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üè¢ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –®–ê–ë–õ–û–ù–ê\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):\n–ü—Ä–∏–º–µ—Ä: company_b, client_123"
        )

    def handle_add_template_id_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —à–∞–±–ª–æ–Ω–∞"""
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or self.awaiting_input_users[chat_id] != 'add_template_id':
            return
            
        template_id = message.text.strip().lower()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID
        if not template_id or not re.match(r'^[a-z0-9_]+$', template_id):
            self.bot.send_message(chat_id, "‚ùå ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º ID
        templates = self._load_header_templates()
        if template_id in templates:
            self.bot.send_message(chat_id, f"‚ùå –®–∞–±–ª–æ–Ω —Å ID '{template_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
        self.awaiting_input_users[chat_id] = f'add_template_name:{template_id}'
        
        self.bot.send_message(
            chat_id,
            f"‚úÖ ID —à–∞–±–ª–æ–Ω–∞: {template_id}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n–ü—Ä–∏–º–µ—Ä: üè≠ –ö–æ–º–ø–∞–Ω–∏—è –ë, üè¢ –ö–ª–∏–µ–Ω—Ç –û–û–û"
        )

    def handle_add_template_name_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or not self.awaiting_input_users[chat_id].startswith('add_template_name:'):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
        full_status = self.awaiting_input_users[chat_id]
        template_id = full_status.split(':')[1]
        template_name = message.text.strip()
        
        if not template_name or len(template_name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        self.awaiting_input_users[chat_id] = f'add_template_company:{template_id}:{template_name}'
        
        self.bot.send_message(
            chat_id,
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {template_name}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∑–∞–∫–∞–∑—á–∏–∫–∞:\n–ü—Ä–∏–º–µ—Ä: –û–û–û ¬´–ö–æ–º–ø–∞–Ω–∏—è –ë¬ª, –ó–ê–û ¬´–ö–ª–∏–µ–Ω—Ç –û–û–û¬ª"
        )

    def handle_add_template_company_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or not self.awaiting_input_users[chat_id].startswith('add_template_company:'):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        full_status = self.awaiting_input_users[chat_id]
        parts = full_status.split(':')
        template_id = parts[1]
        template_name = parts[2]
        company_name = message.text.strip()
        
        if not company_name or len(company_name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
        self.awaiting_input_users[chat_id] = f'add_template_address:{template_id}:{template_name}:{company_name}'
        
        self.bot.send_message(
            chat_id,
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:\n–ü—Ä–∏–º–µ—Ä: 600026, –≥. –í–ª–∞–¥–∏–º–∏—Ä, —É–ª. –õ–µ–Ω–∏–Ω–∞ –¥. 1"
        )

    def handle_add_template_address_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or not self.awaiting_input_users[chat_id].startswith('add_template_address:'):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
        full_status = self.awaiting_input_users[chat_id]
        parts = full_status.split(':')
        template_id = parts[1]
        template_name = parts[2]
        company_name = parts[3]
        address = message.text.strip()
        
        if not address or len(address) < 5:
            self.bot.send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
            return
            
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template_data = {
            "id": template_id,
            "name": template_name,
            "customer": {
                "company": company_name,
                "address": address
            },
            "contractor": {
                "company": "–ò–ü –ê–π—Ä–∞–ø–µ—Ç—è–Ω –ö—Ä–∏—Å—Ç–∏–Ω–∞ –¢–∏–≥—Ä–∞–Ω–æ–≤–Ω–∞",
                "address": "600033, –í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª., –≥. –í–ª–∞–¥–∏–º–∏—Ä, —É–ª. –°—É—â–µ–≤—Å–∫–∞—è, –¥. 7, –∫–≤. 152",
                "inn": "234206956031",
                "ogrnip": "321332800018501",
                "email": "airanetan93@gmail.com",
                "phone": "+79190130122"
            },
            "default_vehicle": "–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        success = self._save_header_template(template_data)

        # ‚úÖ –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ü–ï–ß–ê–¢–¨
        print(f"üîç DEBUG: –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {success}")
        print(f"üîç DEBUG: excel_processor –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(self, 'excel_processor')}")
        if hasattr(self, 'excel_processor'):
            print(f"üîç DEBUG: header_manager –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(self.excel_processor, 'header_manager')}")
        
        if success:
            # ‚úÖ –í–ê–ñ–ù–û: –£–î–ê–õ–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –û–ñ–ò–î–ê–ù–ò–Ø –ü–ï–†–í–´–ú –î–ï–õ–û–ú
            if chat_id in self.awaiting_input_users:
                del self.awaiting_input_users[chat_id]
            
            # ‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–¨ –®–ê–ë–õ–û–ù–´ –í –û–°–ù–û–í–ù–û–ú –ë–û–¢–ï
            if hasattr(self, 'excel_processor'):
                print("üîÑ –í—ã–∑—ã–≤–∞–µ–º reload_templates...")
                self.excel_processor.header_manager.reload_templates()
            
            # ‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –û –£–°–ü–ï–•–ï
            self.bot.send_message(
                chat_id,
                f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n\n"
                f"–®–∞–±–ª–æ–Ω —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–æ–≤."
            )
            
            # ‚úÖ –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
            keyboard = [
                [types.InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –°–ü–ò–°–û–ö", callback_data="admin_add_list")],
                [types.InlineKeyboardButton("üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò", callback_data="admin_manage_lists")],
                [types.InlineKeyboardButton("üè¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê–ú–ò", callback_data="admin_manage_templates")],
                [types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="admin_back")]
            ]
            reply_markup = types.InlineKeyboardMarkup(keyboard)
            
            self.bot.send_message(
                chat_id,
                "üë®‚Äçüíª –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            # ‚úÖ –í–ê–ñ–ù–û: –í–ï–†–ù–£–¢–¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï, –ß–¢–û–ë–´ –ò–ó–ë–ï–ñ–ê–¢–¨ –î–ê–õ–¨–ù–ï–ô–®–ï–ô –û–ë–†–ê–ë–û–¢–ö–ò
            return

        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
            del self.awaiting_input_users[chat_id]

    def handle_view_template_sync(self, call, template_id: str):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ"""
        if not self.bot:
            return
            
        templates = self._load_header_templates()
        template = templates.get(template_id)
        
        if not template:
            self.bot.answer_callback_query(call.id, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        customer = template['customer']
        contractor = template['contractor']
        
        template_info = f"""
üìÑ –®–ê–ë–õ–û–ù: {template['name']}
üÜî ID: {template['id']}

üè¢ –ó–ê–ö–ê–ó–ß–ò–ö:
–ö–æ–º–ø–∞–Ω–∏—è: {customer['company']}
–ê–¥—Ä–µ—Å: {customer['address']}

üë§ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:
{contractor['company']}
–ò–ù–ù: {contractor['inn']}
–û–ì–†–ù–ò–ü: {contractor['ogrnip']}
–ê–¥—Ä–µ—Å: {contractor['address']}
–¢–µ–ª–µ—Ñ–æ–Ω: {contractor['phone']}
Email: {contractor['email']}

üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {template.get('default_vehicle', '–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å')}
        """
        
        keyboard = [
            [types.InlineKeyboardButton("‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨", callback_data=f"admin_edit_template:{template_id}")],
            [types.InlineKeyboardButton("üóëÔ∏è –£–î–ê–õ–ò–¢–¨", callback_data=f"admin_delete_template:{template_id}")],
            [types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="admin_manage_templates")]
        ]
        
        reply_markup = types.InlineKeyboardMarkup(keyboard)
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=template_info,
            reply_markup=reply_markup
        )

    def handle_delete_template_sync(self, call, template_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        if not self.bot:
            return
            
        templates = self._load_header_templates()
        template = templates.get(template_id)
        
        if not template:
            self.bot.answer_callback_query(call.id, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞
        template_file = self.header_templates_path / f"{template_id}.json"
        try:
            template_file.unlink(missing_ok=True)
            
            # ‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–¨ –®–ê–ë–õ–û–ù–´ –í –û–°–ù–û–í–ù–û–ú –ë–û–¢–ï
            if hasattr(self, 'excel_processor'):
                self.excel_processor.header_manager.reload_templates()
            
            self.bot.answer_callback_query(call.id, f"‚úÖ –®–∞–±–ª–æ–Ω '{template['name']}' —É–¥–∞–ª–µ–Ω")
            self.show_templates_management_sync(call)

        except Exception as e:
            self.bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")

    def handle_add_list_start_sync(self, call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        print(f"üîç DEBUG handle_add_list_start_sync: –≤—ã–∑–≤–∞–Ω, chat_id={call.message.chat.id}")
    
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
        
        chat_id = call.message.chat.id
        self.awaiting_input_users[chat_id] = 'add_list_name'
        print(f"‚úÖ DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_input –¥–ª—è {chat_id}")
    
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
            )
            print("‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_add_list_name_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG handle_add_list_name_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
        
        chat_id = message.chat.id
    
        if chat_id not in self.awaiting_input_users or self.awaiting_input_users[chat_id] != 'add_list_name':
            print(f"‚ùå DEBUG: –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç {chat_id}")
            return
        
        list_name = message.text.strip()
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{list_name}'")
    
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not list_name or len(list_name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        existing_lists = self.get_available_lists()
        if list_name in existing_lists:
            self.bot.send_message(
                chat_id, 
                f"‚ùå –°–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return
    
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        success = self._create_list_structure(list_name)
    
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            self.awaiting_input_users[chat_id] = f'add_excel_file:{list_name}'
            self.bot.send_message(
                chat_id,
                f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}' —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç\n\n"
                f"üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
                f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ A: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç' - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
                f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ B: '–ù–æ—Ä–º–æ—á–∞—Å—ã' - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            )
            print(f"‚úÖ DEBUG: –û–∂–∏–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}'")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞")
            del self.awaiting_input_users[chat_id]
            print("‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞")
    
    def handle_add_excel_file_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print(f"üîç DEBUG handle_add_excel_file_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            return
        
        chat_id = message.chat.id
    
        if chat_id not in self.awaiting_input_users or not ('add_excel_file:' in self.awaiting_input_users[chat_id]):
            current_status = self.awaiting_input_users.get(chat_id, '–ù–ï–¢ –°–¢–ê–¢–£–°–ê')
            print(f"‚ùå DEBUG: –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è Excel –æ—Ç {chat_id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
            return
    
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞
        full_status = self.awaiting_input_users[chat_id]
        list_name = full_status.split(':')[1]
        print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫: '{list_name}'")
                
        if not list_name:
            self.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            del self.awaiting_input_users[chat_id]
            return
    
        try:
            if message.document:
                file_info = self.bot.get_file(message.document.file_id)
                file_name = message.document.file_name
                print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name}")
            
                if not file_name.lower().endswith(('.xlsx', '.xls')):
                    self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
                    return
            
                downloaded_file = self.bot.download_file(file_info.file_path)
                print(f"üîç DEBUG: –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(downloaded_file)} –±–∞–π—Ç")
            
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                list_path = self.custom_lists_path / list_name
                list_path.mkdir(parents=True, exist_ok=True)
            
                excel_file_path = list_path / f"works_list_{list_name}.xlsx"
            
                with open(excel_file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
            
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                validation_result = self._validate_excel_file(excel_file_path)
            
                if not validation_result['valid']:
                    excel_file_path.unlink(missing_ok=True)
                    self.bot.send_message(
                        chat_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:\n{validation_result['error']}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    del self.awaiting_input_users[chat_id]
                    return
            
                # ‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê - –í–û–ó–í–†–ê–©–ê–ï–ú –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
                del self.awaiting_input_users[chat_id]
            
                success_message = (
                    f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                    f"üìä –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_file_path.name}\n"
                    f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–±–æ—Ç: {validation_result['work_count']}\n"
                    f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {validation_result['total_hours']:.1f} –Ω/—á\n\n"
                    f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
                )
            
                self.bot.send_message(chat_id, success_message)
                print(f"‚úÖ DEBUG: Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è '{list_name}', —Ä–∞–±–æ—Ç: {validation_result['work_count']}")
            
                # ‚úÖ –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
                self.bot.send_message(
                    chat_id,
                    f"üè† –°–ø–∏—Å–æ–∫ '{list_name}' —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ."
                )
            
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
                
        except Exception as e:
            print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"Error handling Excel file upload: {e}")
            del self.awaiting_input_users[chat_id]

    def handle_upload_list_start_sync(self, call):
        """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç"""
        print(f"üîç DEBUG handle_upload_list_start_sync: –≤—ã–∑–≤–∞–Ω, chat_id={call.message.chat.id}")
        
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
            
        chat_id = call.message.chat.id
        self.awaiting_input_users[chat_id] = 'upload_list_name'
        print(f"‚úÖ DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_input –¥–ª—è {chat_id}")
        
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üì• –ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–ê –†–ê–ë–û–¢\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
            )
            print("‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_upload_list_name_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG handle_upload_list_name_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set")
            return
            
        chat_id = message.chat.id

        # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ - –æ–∂–∏–¥–∞–µ–º upload_list_name
        if chat_id not in self.awaiting_input_users or self.awaiting_input_users[chat_id] != 'upload_list_name':
            print(f"‚ùå DEBUG: –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç {chat_id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.awaiting_input_users.get(chat_id, '–Ω–µ—Ç')}")
            return
        
        list_name = message.text.strip()
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: '{list_name}'")    
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not list_name or len(list_name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        existing_lists = self.get_available_lists()
        if list_name in existing_lists:
            self.bot.send_message(
                chat_id, 
                f"‚ùå –°–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        success = self._create_list_structure(list_name)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            self.awaiting_input_users[chat_id] = f'upload_excel_file:{list_name}'
            self.bot.send_message(
                chat_id,
                f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}' —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç (2 –∫–æ–ª–æ–Ω–∫–∏: —Ä–∞–±–æ—Ç–∞, –Ω–æ—Ä–º–æ—á–∞—Å—ã)\n\n"
                f"üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
                f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ A: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç' - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
                f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ B: '–ù–æ—Ä–º–æ—á–∞—Å—ã' - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                f"–ü—Ä–∏–º–µ—Ä:\n"
                f"| –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç          | –ù–æ—Ä–º–æ—á–∞—Å—ã |\n"
                f"|-----------------------------|-----------|\n"
                f"| –ü–æ–∫—Ä–∞—Å–∫–∞ –±–∞–º–ø–µ—Ä–∞           | 1.5       |\n"
                f"| –ó–∞–º–µ–Ω–∞ —Ñ–∞—Ä—ã                | 2.0       |"
            )
            print(f"‚úÖ DEBUG: –û–∂–∏–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}'")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞")
            del self.awaiting_input_users[chat_id]
            print("‚ùå DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞")

    def handle_upload_excel_file_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG handle_upload_excel_file_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        # ‚úÖ –î–û–ë–ê–í–ò–ú –ü–û–î–†–û–ë–ù–£–Æ –û–¢–õ–ê–î–ö–£
        print(f"üîç DEBUG: awaiting_input_users: {self.awaiting_input_users}")
        print(f"üîç DEBUG: chat_id –≤ awaiting: {chat_id in self.awaiting_input_users}")
                
        if chat_id not in self.awaiting_input_users or not ('excel_file:' in self.awaiting_input_users[chat_id]):
            current_status = self.awaiting_input_users.get(chat_id, '–ù–ï–¢ –°–¢–ê–¢–£–°–ê')
            print(f"‚ùå DEBUG: –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è Excel –æ—Ç {chat_id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞ –∏–∑ awaiting_input_users
        full_status = self.awaiting_input_users[chat_id]
        list_name = full_status.split(':')[1]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ ':'
        print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫: '{list_name}'")
                    
        if not list_name:
            self.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            del self.awaiting_input_users[chat_id]
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            if message.document:
                file_info = self.bot.get_file(message.document.file_id)
                file_name = message.document.file_name
                print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not file_name.lower().endswith(('.xlsx', '.xls')):
                    self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
                    return
                
                downloaded_file = self.bot.download_file(file_info.file_path)
                print(f"üîç DEBUG: –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(downloaded_file)} –±–∞–π—Ç")
                
                # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ò –°–û–ó–î–ê–ï–ú –°–¢–†–£–ö–¢–£–†–£ –ü–ê–ü–û–ö
                list_path = self.custom_lists_path / list_name
                print(f"üîç DEBUG: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {list_path}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                list_path.mkdir(parents=True, exist_ok=True)
                print(f"üîç DEBUG: –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {list_path.exists()}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å–ø–∏—Å–∫–∞
                excel_file_path = list_path / f"works_list_{list_name}.xlsx"
                print(f"üîç DEBUG: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {excel_file_path}")
                
                with open(excel_file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
                
                print(f"üîç DEBUG: –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–∏—Å–∫: {excel_file_path.exists()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                validation_result = self._validate_excel_file(excel_file_path)
                print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")
                
                if not validation_result['valid']:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª
                    excel_file_path.unlink(missing_ok=True)
                    self.bot.send_message(
                        chat_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:\n{validation_result['error']}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    del self.awaiting_input_users[chat_id]
                    return
                
                del self.awaiting_input_users[chat_id]
                
                self.bot.send_message(
                    chat_id,
                    f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                    f"üìä –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_file_path.name}\n"
                    f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–±–æ—Ç: {validation_result['work_count']}\n"
                    f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {validation_result['total_hours']:.1f} –Ω/—á\n\n"
                    f"üîÑ –°–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                )
                print(f"‚úÖ DEBUG: Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è '{list_name}', —Ä–∞–±–æ—Ç: {validation_result['work_count']}")
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
                    
        except Exception as e:
            print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"Error handling Excel file upload: {e}")
            del self.awaiting_input_users[chat_id]        
 
    def _validate_excel_file(self, file_path: pathlib.Path) -> Dict[str, any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞"""
        try:
            import pandas as pd
            
            df = pd.read_excel(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            if len(df.columns) < 2:
                return {'valid': False, 'error': '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∏'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if len(df) == 0:
                return {'valid': False, 'error': '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            valid_works = []
            total_hours = 0.0
            
            for index, row in df.iterrows():
                if len(row) >= 2 and pd.notna(row.iloc[0]) and pd.notna(row.iloc[1]):
                    work_name = str(row.iloc[0]).strip()
                    if work_name and work_name != 'nan':
                        try:
                            hours = float(row.iloc[1])
                            if hours > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ—Ä–º–æ—á–∞—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                                valid_works.append((work_name, hours))
                                total_hours += hours
                        except (ValueError, TypeError):
                            continue
            
            if len(valid_works) == 0:
                return {'valid': False, 'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ñ–∞–π–ª–µ'}
            
            return {
                'valid': True,
                'work_count': len(valid_works),
                'total_hours': total_hours
            }
            
        except Exception as e:
            return {'valid': False, 'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'}

    def create_new_list_start_sync(self, call):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        print(f"üîç DEBUG create_new_list_start_sync: –≤—ã–∑–≤–∞–Ω, chat_id={call.message.chat.id}")
        print(f"üîç DEBUG: self.bot = {self.bot is not None}")
        
        if not self.bot:
            print("‚ùå DEBUG: bot instance not set - –í–û–¢ –ü–†–û–ë–õ–ï–ú–ê!")
            return
            
        chat_id = call.message.chat.id
        self.awaiting_input_users[chat_id] = 'list_name'
        print(f"‚úÖ DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_input –¥–ª—è {chat_id}")
        
        try:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìù –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ü–ò–°–ö–ê\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:"
            )
            print("‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_excel_file_sync(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
        print(f"üîç DEBUG handle_excel_file_sync: –≤—ã–∑–≤–∞–Ω")
        if not self.bot:
            return
            
        chat_id = message.chat.id
        
        if chat_id not in self.awaiting_input_users or not self.awaiting_input_users[chat_id].startswith('excel_file:'):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–∏—Å–∫–∞ –∏–∑ awaiting_input_users
        list_name = self.awaiting_input_users[chat_id].replace('excel_file:', '')
                
        if not list_name:
            self.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            del self.awaiting_input_users[chat_id]
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            if message.document:
                file_info = self.bot.get_file(message.document.file_id)
                downloaded_file = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å–ø–∏—Å–∫–∞
                list_path = self.custom_lists_path / list_name
                excel_file_path = list_path / f"works_list_{list_name.lower()}.xlsx"
                
                with open(excel_file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
                
                del self.awaiting_input_users[chat_id]
                
                self.bot.send_message(
                    chat_id,
                    f"‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}'!\n\n"
                    f"üìä –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_file_path}\n\n"
                    f"üîÑ –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                )
                print(f"‚úÖ DEBUG: Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è '{list_name}'")
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"Error handling Excel file: {e}")
            del self.awaiting_input_users[chat_id]

    def _create_list_structure(self, list_name: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            base_path = self.custom_lists_path / list_name
            folders = ["–ó–∞–∫–∞–∑—ã", "–£—á–µ—Ç", "–§–æ—Ç–æ", "cache"]
            
            for folder in folders:
                (base_path / folder).mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π Excel —Ñ–∞–π–ª (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º)
            excel_path = base_path / f"works_list_{list_name.lower()}.xlsx"
            excel_path.touch()
            
            return True
        except Exception as e:
            logger.error(f"Error creating list structure: {e}")
            return False
    
    def load_works_from_custom_list(self, list_name: str) -> List[Tuple[str, float]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            list_path = self.custom_lists_path / list_name
            excel_file = list_path / f"works_list_{list_name.lower()}.xlsx"
            
            if not excel_file.exists():
                print(f"‚ùå DEBUG: –§–∞–π–ª {excel_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞
            import pandas as pd
            df = pd.read_excel(excel_file)
            
            print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω DataFrame —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏")
            print(f"üîç DEBUG: –ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")
            
            works = []
            for index, row in df.iterrows():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º iloc –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                if len(row) >= 2 and pd.notna(row.iloc[0]) and pd.notna(row.iloc[1]):
                    work_name = str(row.iloc[0]).strip()
                    try:
                        hours = float(row.iloc[1])
                        works.append((work_name, hours))
                        print(f"‚úÖ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ '{work_name}' - {hours} —á")
                    except (ValueError, TypeError) as e:
                        print(f"‚ö†Ô∏è DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
                        continue
                else:
                    print(f"‚ö†Ô∏è DEBUG: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {index} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                        
            print(f"‚úÖ DEBUG: –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(works)} —Ä–∞–±–æ—Ç")
            return works
            
        except Exception as e:
            logger.error(f"Error loading works from custom list {list_name}: {e}")
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return []

    def get_available_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤"""
        print(f"üîç DEBUG get_available_lists: –ø—É—Ç—å={self.custom_lists_path}")
        print(f"üîç DEBUG: –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {self.custom_lists_path.exists()}")
        lists = []
        for folder in self.custom_lists_path.iterdir():
            print(f"üîç DEBUG: –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder.name} (is_dir: {folder.is_dir()})")
            if folder.is_dir():
                lists.append(folder.name)
        print(f"üîç DEBUG: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–∫–∏: {lists}")
        return lists

    def register_handlers(self, application):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò - –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ù–û–í–´–ï
        application.add_handler(types.CallbackQueryHandler(self.handle_add_list_start_sync, func=lambda call: call.data == 'admin_add_list'))
        application.add_handler(types.CallbackQueryHandler(self.show_admin_panel_sync, func=lambda call: call.data == 'admin_back'))
        application.add_handler(types.CallbackQueryHandler(self.show_admin_panel_sync, func=lambda call: call.data == 'admin_back_to_main'))
        application.add_handler(types.CallbackQueryHandler(self.show_templates_management_sync, func=lambda call: call.data == 'admin_manage_templates'))
        application.add_handler(types.CallbackQueryHandler(self.handle_add_template_start_sync, func=lambda call: call.data == 'admin_add_template'))
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
        application.add_handler(types.CallbackQueryHandler(
            lambda call: self.handle_view_template_sync(call, call.data.split(':')[1]), 
            func=lambda call: call.data.startswith('admin_view_template:')
        ))
        application.add_handler(types.CallbackQueryHandler(
            lambda call: self.handle_delete_template_sync(call, call.data.split(':')[1]), 
            func=lambda call: call.data.startswith('admin_delete_template:')
        ))
        
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# admin_panel = AdminPanel()