"""
üöÄ –§–ê–ë–†–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í –î–õ–Ø TRUCKSERVICE MANAGER
–ü–ê–¢–¢–ï–†–ù FACTORY –î–õ–Ø –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
"""

import pathlib
from typing import Dict, Any, List, Tuple, Optional
from abc import ABC, abstractmethod
import logging
from datetime import datetime

# ‚úÖ –ë–ê–ó–û–í–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
class DocumentError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    pass

class DocumentCreationError(DocumentError):
    """–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    pass

class DocumentValidationError(DocumentError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    pass


# ‚úÖ –ê–ë–°–¢–†–ê–ö–¢–ù–´–ô –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –î–û–ö–£–ú–ï–ù–¢–ê
class Document(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, session: Dict[str, Any]):
        self.session = session
        self.logger = logging.getLogger('Document')
        self._validate_session()
    
    def _validate_session(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        required_fields = ['license_plate', 'date', 'order_number', 'workers', 'selected_works']
        for field in required_fields:
            if field not in self.session or not self.session[field]:
                raise DocumentValidationError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
    
    @abstractmethod
    def create(self, output_path: pathlib.Path) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        pass
    
    @abstractmethod
    def get_filename(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        pass
    
    def _get_base_filename(self) -> str:
        """–ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        order_number = self.session.get('order_number', '000')
        date_str = self.session['date'].strftime('%d.%m.%Y')
        license_plate = self.session['license_plate']
        return f"‚Ññ{order_number} {date_str} {license_plate}"


# ‚úÖ –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í
class ExcelDocument(Document):
    """Excel –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥"""
    
    def __init__(self, session: Dict[str, Any], excel_processor):
        super().__init__(session)
        self.excel_processor = excel_processor
    
    def create(self, output_path: pathlib.Path) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            template_path = output_path.parent.parent / "–®–∞–±–ª–æ–Ω—ã" / "template_autoservice.xlsx"
            success = self.excel_processor.create_professional_order(
                self.session, 
                str(template_path), 
                str(output_path)
            )
            
            if success and output_path.exists():
                self.logger.info(f"‚úÖ Excel –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
                return True
            else:
                raise DocumentCreationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel –¥–æ–∫—É–º–µ–Ω—Ç: {output_path}")
                
        except Exception as e:
            raise DocumentCreationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}") from e
    
    def get_filename(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ Excel —Ñ–∞–π–ª–∞"""
        return f"{self._get_base_filename()}.xlsx"


class TextDocument(Document):
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞"""
    
    def create(self, output_path: pathlib.Path) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            content = self._create_draft_content()
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            if output_path.exists():
                self.logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
                return True
            else:
                raise DocumentCreationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {output_path}")
                
        except Exception as e:
            raise DocumentCreationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}") from e
    
    def get_filename(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        return f"{self._get_base_filename()}.txt"
    
    def _create_draft_content(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
        content = []
        content.append(f"{self.session['license_plate']} / {self.session['date'].strftime('%d.%m.%Y')}")
        content.append(self.session['workers'])
        content.append("")
        
        content.append("–†–ê–ë–û–¢–´:")
        for name, hours in self.session['selected_works']:
            content.append(f"‚Ä¢ {name}")
        
        if self.session.get('selected_materials'):
            content.append("")
            content.append("–ú–ê–¢–ï–†–ò–ê–õ–´:")
            for material in self.session['selected_materials']:
                content.append(f"‚Ä¢ {material}")
        
        return '\n'.join(content)


# ‚úÖ –§–ê–ë–†–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í
class DocumentFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–æ–≤"""
    
    def __init__(self, excel_processor):
        self.excel_processor = excel_processor
        self.logger = logging.getLogger('DocumentFactory')
    
    def create_all(self, session: Dict[str, Any], section_folder: pathlib.Path) -> Dict[str, pathlib.Path]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        try:
            orders_folder = section_folder / "–ó–∞–∫–∞–∑—ã"
            orders_folder.mkdir(parents=True, exist_ok=True)
            
            documents = {}
            
            # –°–æ–∑–¥–∞–µ–º Excel –¥–æ–∫—É–º–µ–Ω—Ç
            excel_doc = ExcelDocument(session, self.excel_processor)
            excel_filename = excel_doc.get_filename()
            excel_path = orders_folder / excel_filename
            
            if excel_doc.create(excel_path):
                documents['excel'] = excel_path
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            text_doc = TextDocument(session)
            text_filename = text_doc.get_filename()
            text_path = orders_folder / text_filename
            
            if text_doc.create(text_path):
                documents['text'] = text_path
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
            return documents
            
        except Exception as e:
            raise DocumentCreationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {e}") from e
    
    def create_excel(self, session: Dict[str, Any], section_folder: pathlib.Path) -> Optional[pathlib.Path]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            excel_doc = ExcelDocument(session, self.excel_processor)
            orders_folder = section_folder / "–ó–∞–∫–∞–∑—ã"
            orders_folder.mkdir(parents=True, exist_ok=True)
            
            excel_filename = excel_doc.get_filename()
            excel_path = orders_folder / excel_filename
            
            if excel_doc.create(excel_path):
                return excel_path
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def create_text(self, session: Dict[str, Any], section_folder: pathlib.Path) -> Optional[pathlib.Path]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            text_doc = TextDocument(session)
            orders_folder = section_folder / "–ó–∞–∫–∞–∑—ã"
            orders_folder.mkdir(parents=True, exist_ok=True)
            
            text_filename = text_doc.get_filename()
            text_path = orders_folder / text_filename
            
            if text_doc.create(text_path):
                return text_path
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None


# ‚úÖ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
class DocumentUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    
    @staticmethod
    def validate_session_for_documents(session: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        required_fields = ['license_plate', 'date', 'order_number', 'workers', 'selected_works']
        return all(field in session and session[field] for field in required_fields)
    
    @staticmethod
    def calculate_totals(session: Dict[str, Any]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        works_total = sum(hours for _, hours in session['selected_works']) * 2500
        
        materials_data = {
            "–í–î-40": 375,
            "–ü–µ—Ä—á–∞—Ç–∫–∏": 95, 
            "–°–º–∞–∑–∫–∞": 210,
            "–î–∏—Å–∫ –æ—Ç—Ä–µ–∑–Ω–æ–π": 120
        }
        
        selected_materials = session.get('selected_materials', [])
        if not selected_materials:
            selected_materials = list(materials_data.keys())
        
        materials_total = sum(materials_data.get(material, 0) for material in selected_materials)
        total_amount = works_total + materials_total
        
        return {
            'works_total': works_total,
            'materials_total': materials_total,
            'total_amount': total_amount
        }