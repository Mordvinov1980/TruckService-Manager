"""
üöÄ –†–ï–ü–û–ó–ò–¢–û–†–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
–ü–ê–¢–¢–ï–†–ù REPOSITORY –î–õ–Ø –ê–ë–°–¢–†–ê–ö–¶–ò–ò –î–û–°–¢–£–ü–ê –ö –î–ê–ù–ù–´–ú
"""

import pandas as pd
import pickle
import time
import pathlib
from typing import List, Tuple, Optional, Dict, Any
from abc import ABC, abstractmethod
import logging
import datetime

# ‚úÖ –ë–ê–ó–û–í–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í
class RepositoryError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    pass

class DataNotFoundError(RepositoryError):
    """–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"""
    pass

class CacheError(RepositoryError):
    """–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass


# ‚úÖ –ê–ë–°–¢–†–ê–ö–¢–ù–´–ï –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´
class BaseRepository(ABC):
    """–ë–∞–∑–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, cache_ttl: int = 3600):
        self.cache_ttl = cache_ttl
        self.logger = logging.getLogger('Repository')
    
    def _load_from_cache(self, cache_key: str, cache_file: pathlib.Path) -> Optional[Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        try:
            if cache_file.exists():
                with open(cache_file, 'rb') as f:
                    cached_data = pickle.load(f)
                if time.time() - cached_data['timestamp'] < self.cache_ttl:
                    self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {cache_key}")
                    return cached_data['data']
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ {cache_key}: {e}")
        return None
    
    def _save_to_cache(self, data: Any, cache_key: str, cache_file: pathlib.Path) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        try:
            cache_file.parent.mkdir(parents=True, exist_ok=True)
            with open(cache_file, 'wb') as f:
                pickle.dump({'data': data, 'timestamp': time.time()}, f)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ {cache_key}: {e}")


class WorksRepository(BaseRepository):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–±–æ—Ç–∞–º–∏"""
    
    @abstractmethod
    def get_works(self, section: str) -> List[Tuple[str, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        pass
    
    @abstractmethod
    def get_works_count(self, section: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ"""
        pass


class MaterialsRepository(BaseRepository):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"""
    
    @abstractmethod
    def get_materials(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        pass
    
    @abstractmethod
    def get_material_price(self, material_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        pass


class AccountingRepository(BaseRepository):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    @abstractmethod
    def save_order(self, session: Dict[str, Any], excel_filename: str, has_photos: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —É—á–µ—Ç"""
        pass
    
    @abstractmethod
    def get_order_statistics(self, section: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
        pass


# ‚úÖ –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –î–õ–Ø EXCEL
class ExcelWorksRepository(WorksRepository):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç –¥–ª—è Excel"""
    
    def __init__(self, main_folder: pathlib.Path, sections_config: Dict[str, Any], cache_ttl: int = 3600):
        super().__init__(cache_ttl)
        self.main_folder = main_folder
        self.sections_config = sections_config
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤
        self.default_works = {
            'base': [
                ("–û—Å–º–æ—Ç—Ä –¢–°", 0.4), ("–ó–∞–º–µ–Ω–∞ –Ω–∏–∂–Ω–µ–π –Ω–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∞–≤–æ–π —Ñ–∞—Ä—ã", 0.6),
                ("–ó–∞–º–µ–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –Ω–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∞–≤–æ–π —Ñ–∞—Ä—ã", 0.8), ("–ó–∞–º–µ–Ω–∞ –Ω–∏–∂–Ω–µ–π –Ω–∞–∫–ª–∞–¥–∫–∏ –ª–µ–≤–æ–π —Ñ–∞—Ä—ã", 0.6),
                ("–ó–∞–º–µ–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –Ω–∞–∫–ª–∞–¥–∫–∏ –ª–µ–≤–æ–π —Ñ–∞—Ä—ã", 0.8), ("–ó–∞–º–µ–Ω–∞ –ø—Ä–∞–≤–æ–π –ø–æ–¥–Ω–æ–∂–∫–∏", 1.4),
                ("–ó–∞–º–µ–Ω–∞ –ª–µ–≤–æ–π –ø–æ–¥–Ω–æ–∂–∫–∏", 1.4), ("–ó–∞–º–µ–Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∞–≤–æ–π –ø–æ–¥–Ω–æ–∂–∫–∏", 0.2),
                ("–ó–∞–º–µ–Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–∏ –ª–µ–≤–æ–π –ø–æ–¥–Ω–æ–∂–∫–∏", 0.2), ("–ó–∞–º–µ–Ω–∞ –ª—é—á–∫–∞ –ø—Ä–∞–≤–æ–π –ø–æ–¥–Ω–æ–∂–∫–∏", 0.4),
            ]
        }
    
    def get_works(self, section: str) -> List[Tuple[str, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if section not in self.sections_config:
            raise DataNotFoundError(f"–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {section}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{section}_works"
        cache_file = self.sections_config[section]['folder'] / "cache" / f"{cache_key}.pkl"
        
        cached_data = self._load_from_cache(cache_key, cache_file)
        if cached_data is not None:
            return cached_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Excel
        works = self._load_works_from_excel(section)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self._save_to_cache(works, cache_key, cache_file)
        
        return works
    
    def get_works_count(self, section: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ"""
        works = self.get_works(section)
        return len(works)
    
    def _load_works_from_excel(self, section: str) -> List[Tuple[str, float]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        section_data = self.sections_config[section]
        works_file = section_data['works_file']
        
        try:
            # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –®–∞–±–ª–æ–Ω—ã
            excel_path = self.main_folder / "–®–∞–±–ª–æ–Ω—ã" / works_file
            
            if not excel_path.exists():
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–∞–ø–∫–µ –®–∞–±–ª–æ–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                excel_path = pathlib.Path(works_file)
            
            if excel_path.exists():
                df = pd.read_excel(excel_path)
                works = []
                valid_count = 0
                
                for idx, row in df.iterrows():
                    work_name = str(row.iloc[0]).strip()
                    work_hours = row.iloc[1]
                    
                    if work_name and work_name != 'nan' and pd.notna(work_hours):
                        try:
                            hours = float(work_hours)
                            works.append((work_name, hours))
                            valid_count += 1
                        except (ValueError, TypeError):
                            continue
                    else:
                        continue
                
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {valid_count} —Ä–∞–±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {section}")
                return works
            else:
                self.logger.warning(f"‚ùå –§–∞–π–ª {works_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
                return self.default_works.get(section, [])
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç: {e}")
            return self.default_works.get(section, [])


class ExcelMaterialsRepository(MaterialsRepository):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è Excel"""
    
    def __init__(self, main_folder: pathlib.Path, cache_ttl: int = 3600):
        super().__init__(cache_ttl)
        self.main_folder = main_folder
        
        # –¶–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.material_prices = {
            "–í–î-40": 375,
            "–ü–µ—Ä—á–∞—Ç–∫–∏": 95,
            "–°–º–∞–∑–∫–∞": 210,
            "–î–∏—Å–∫ –æ—Ç—Ä–µ–∑–Ω–æ–π": 120
        }
    
    def get_materials(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = "materials"
        cache_file = self.main_folder / "cache" / f"{cache_key}.pkl"
        
        cached_data = self._load_from_cache(cache_key, cache_file)
        if cached_data is not None:
            return cached_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Excel
        materials = self._load_materials_from_excel()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self._save_to_cache(materials, cache_key, cache_file)
        
        return materials
    
    def get_material_price(self, material_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        return self.material_prices.get(material_name, 0)
    
    def _load_materials_from_excel(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            materials_path = self.main_folder / "–®–∞–±–ª–æ–Ω—ã" / "list_materials.xlsx"
            
            if not materials_path.exists():
                materials_path = pathlib.Path("list_materials.xlsx")
            
            if materials_path.exists():
                df = pd.read_excel(materials_path)
                materials = []
                valid_count = 0
                
                for idx, row in df.iterrows():
                    material_name = str(row.iloc[0]).strip()
                    
                    if material_name and material_name != 'nan':
                        materials.append(material_name)
                        valid_count += 1
                
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {valid_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                return materials
            else:
                self.logger.warning("‚ùå –§–∞–π–ª list_materials.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                return list(self.material_prices.keys())
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ Excel: {e}")
            return list(self.material_prices.keys())


class ExcelAccountingRepository(AccountingRepository):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—á–µ—Ç–∞ –¥–ª—è Excel"""
    
    def __init__(self, main_folder: pathlib.Path, sections_config: Dict[str, Any], common_accounting_folder: pathlib.Path):
        super().__init__()
        self.main_folder = main_folder
        self.sections_config = sections_config
        self.common_accounting_folder = common_accounting_folder
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —É—á–µ—Ç–∞
        self._initialize_accounting_files()

    # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ú–ï–¢–û–î –ü–†–Ø–ú–û –ó–î–ï–°–¨ - –ø–æ—Å–ª–µ __init__ –∏ –ø–µ—Ä–µ–¥ save_order
    def _safe_dataframe_concat(self, df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ DataFrame —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ï—Å–ª–∏ –æ–±–∞ DataFrame –ø—É—Å—Ç—ã–µ
            if df1.empty and df2.empty:
                return pd.DataFrame()
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π DataFrame –ø—É—Å—Ç–æ–π
            if df1.empty:
                return df2
            
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π DataFrame –ø—É—Å—Ç–æ–π  
            if df2.empty:
                return df1
            
            # –û–±–∞ –Ω–µ –ø—É—Å—Ç—ã–µ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            return pd.concat([df1, df2], ignore_index=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è DataFrame: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—É—Å—Ç–æ–π DataFrame –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if not df1.empty:
                return df1
            elif not df2.empty:
                return df2
            else:
                return pd.DataFrame()

    def save_order(self, session: Dict[str, Any], excel_filename: str, has_photos: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —É—á–µ—Ç"""
        try:
            section_id = session['section']
            
            # ‚úÖ –í–´–ß–ò–°–õ–Ø–ï–ú section_name –ü–ï–†–í–´–ú –î–ï–õ–û–ú
            if section_id.startswith('custom_'):
                section_name = f"üìÅ {session['custom_list']}"
            else:
                section_name = self.sections_config[section_id]['name']
            
            # ‚úÖ –ü–û–¢–û–ú –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º section_id –¥–ª—è —É—á–µ—Ç–∞
            if section_id.startswith('custom_'):
                section_id = 'base'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —É—á–µ—Ç
            section_accounting_file = self.sections_config[section_id]['folder'] / "–£—á–µ—Ç" / "—É—á–µ—Ç_–∑–∞–∫–∞–∑–æ–≤.xlsx"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–õ–û–ù–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–¨–ù–û–ì–û –£–ß–ï–¢–ê (11 –∫–æ–ª–æ–Ω–æ–∫)
            section_columns = [
                "ID", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–ù–æ–º–µ—Ä –ó–ù", "–ì–æ—Å–Ω–æ–º–µ—Ä", 
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", "–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–§–∞–π–ª Excel", "–§–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞", "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            ]
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ò–õ–ò —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            try:
                df_section = pd.read_excel(section_accounting_file)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                for col in section_columns:
                    if col not in df_section.columns:
                        df_section[col] = None
            except:
                df_section = pd.DataFrame(columns=section_columns)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            now = datetime.datetime.now()
            order_id = len(df_section) + 1 if not df_section.empty else 1
            selected_count = len(session['selected_works'])
            total_hours = sum(hours for _, hours in session['selected_works'])
            
            new_record = pd.DataFrame([{
                'ID': order_id,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': session['date'].strftime('%d.%m.%Y'),
                '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è': now.strftime('%H:%M:%S'),
                '–ù–æ–º–µ—Ä –ó–ù': session.get('order_number', '000'),
                '–ì–æ—Å–Ω–æ–º–µ—Ä': session['license_plate'],
                '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏': session['workers'],
                '–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç': selected_count,
                '–û–±—â–µ–µ –≤—Ä–µ–º—è': total_hours,
                '–§–∞–π–ª Excel': excel_filename,
                '–§–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞': session.get('draft_filename', ''),
                '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã': has_photos
            }])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è)
            df_section = pd.concat([df_section, new_record], ignore_index=True)
            df_section.to_excel(section_accounting_file, index=False)
            
            # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ê–í–¢–û-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –†–ê–ó–î–ï–õ–¨–ù–û–ì–û –£–ß–ï–¢–ê
            self._apply_accounting_formatting(section_accounting_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —É—á–µ—Ç
            common_accounting_file = self.common_accounting_folder / "–≥–ª–∞–≤–Ω–∞—è_–±–∞–∑–∞.xlsx"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–õ–û–ù–ö–ò –î–õ–Ø –û–ë–©–ï–ì–û –£–ß–ï–¢–ê (11 –∫–æ–ª–æ–Ω–æ–∫)
            common_columns = [
                "ID", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–†–∞–∑–¥–µ–ª", "–ù–æ–º–µ—Ä –ó–ù", 
                "–ì–æ—Å–Ω–æ–º–µ—Ä", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", "–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–§–∞–π–ª Excel", "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            ]
            
            try:
                df_common = pd.read_excel(common_accounting_file)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                for col in common_columns:
                    if col not in df_common.columns:
                        df_common[col] = None
            except:
                df_common = pd.DataFrame(columns=common_columns)
            
            new_common_record = pd.DataFrame([{
                'ID': len(df_common) + 1 if not df_common.empty else 1,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': session['date'].strftime('%d.%m.%Y'),
                '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è': now.strftime('%H:%M:%S'),
                '–†–∞–∑–¥–µ–ª': section_name,  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ä–∞–∑–¥–µ–ª–∞
                '–ù–æ–º–µ—Ä –ó–ù': session.get('order_number', '000'),
                '–ì–æ—Å–Ω–æ–º–µ—Ä': session['license_plate'],
                '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏': session['workers'],
                '–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç': selected_count,
                '–û–±—â–µ–µ –≤—Ä–µ–º—è': total_hours,
                '–§–∞–π–ª Excel': excel_filename,
                '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã': has_photos
            }])
            
            df_common = pd.concat([df_common, new_common_record], ignore_index=True)
            df_common.to_excel(common_accounting_file, index=False)
            
            # ‚úÖ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ê–í–¢–û-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–ë–©–ï–ì–û –£–ß–ï–¢–ê
            self._apply_accounting_formatting(common_accounting_file)
            
            self.logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —É—á–µ—Ç: —Ä–∞–∑–¥–µ–ª {section_id}, ID {order_id}, —Ñ–æ—Ç–æ: {has_photos}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —É—á–µ—Ç: {e}")
            return False
    
    def get_order_statistics(self, section: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ —É—á–µ—Ç–∞
        return {
            'total_orders': 0,
            'total_hours': 0,
            'total_revenue': 0
        }
    
    def _initialize_accounting_files(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —É—á–µ—Ç–∞"""
        try:
            for section_id in self.sections_config.keys():
                accounting_file = self.sections_config[section_id]['folder'] / "–£—á–µ—Ç" / "—É—á–µ—Ç_–∑–∞–∫–∞–∑–æ–≤.xlsx"
                self._setup_section_accounting_file(accounting_file, section_id)
            
            common_accounting_file = self.common_accounting_folder / "–≥–ª–∞–≤–Ω–∞—è_–±–∞–∑–∞.xlsx"
            self._setup_common_accounting_file(common_accounting_file)
            
        except Exception as e:
            raise RepositoryError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—á–µ—Ç–∞: {e}") from e
    
    def _setup_section_accounting_file(self, accounting_file: pathlib.Path, section_id: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        if not accounting_file.exists():
            df = pd.DataFrame(columns=[
                "ID", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–ù–æ–º–µ—Ä –ó–ù", "–ì–æ—Å–Ω–æ–º–µ—Ä", 
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", "–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–§–∞–π–ª Excel", "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            ])
            df.to_excel(accounting_file, index=False)
    
    def _setup_common_accounting_file(self, accounting_file: pathlib.Path) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not accounting_file.exists():
            df = pd.DataFrame(columns=[
                "ID", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–†–∞–∑–¥–µ–ª", "–ù–æ–º–µ—Ä –ó–ù", 
                "–ì–æ—Å–Ω–æ–º–µ—Ä", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", "–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            ])
            df.to_excel(accounting_file, index=False)

    def _apply_accounting_formatting(self, file_path: pathlib.Path) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª–∞–º —É—á–µ—Ç–∞"""
        try:
            import openpyxl
            from openpyxl.styles import Font, Alignment
            from openpyxl.utils import get_column_letter
            
            wb = openpyxl.load_workbook(file_path)
            ws = wb.active
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                
                for cell in column:
                    try:
                        if cell.value:
                            max_length = max(max_length, len(str(cell.value)))
                    except:
                        pass
                
                adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 50
                ws.column_dimensions[column_letter].width = adjusted_width
            
            # ‚úÖ –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï –ü–û –¶–ï–ù–¢–†–£ –î–õ–Ø –í–°–ï–• –Ø–ß–ï–ï–ö
            for row in ws.iter_rows():
                for cell in row:
                    if cell.row == 1:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                    else:
                        # ‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ü–û –¶–ï–ù–¢–†–£
                        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                
                # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
                ws.row_dimensions[row[0].row].height = None
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —à–∞–ø–∫—É
            ws.freeze_panes = 'A2'
            
            wb.save(file_path)
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∞–≤—Ç–æ-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {file_path.name}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {file_path}: {e}")

# ‚úÖ –§–ê–ë–†–ò–ö–ê –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í
class RepositoryFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    
    @staticmethod
    def create_works_repository(main_folder: pathlib.Path, sections_config: Dict[str, Any]) -> WorksRepository:
        return ExcelWorksRepository(main_folder, sections_config)
    
    @staticmethod
    def create_materials_repository(main_folder: pathlib.Path) -> MaterialsRepository:
        return ExcelMaterialsRepository(main_folder)
    
    @staticmethod
    def create_accounting_repository(main_folder: pathlib.Path, sections_config: Dict[str, Any], common_accounting_folder: pathlib.Path) -> AccountingRepository:
        return ExcelAccountingRepository(main_folder, sections_config, common_accounting_folder)