"""
üöÄ –ú–ï–ù–ï–î–ñ–ï–† –ù–ê–í–ò–ì–ê–¶–ò–ò –î–õ–Ø TRUCKSERVICE MANAGER
–¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–ï–ô
"""

import telebot
from telebot import types
import logging
from typing import Dict, Any, Optional, List

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, bot):
        self.bot = bot
        self.logger = logging.getLogger('NavigationManager')
        self.admin_panel = None
        self.excel_processor = None
        self.sections = {}
        
    def set_dependencies(self, admin_panel, excel_processor):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.admin_panel = admin_panel
        self.excel_processor = excel_processor
    
    def set_sections(self, sections: Dict[str, Any]) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.sections = sections

    def show_main_menu(self, chat_id: int) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            buttons = [
                types.InlineKeyboardButton("üöõ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó", callback_data="nav:sections_menu"),  # ‚Üê –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê
                types.InlineKeyboardButton("‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨", callback_data="admin_panel"),
                types.InlineKeyboardButton("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê", callback_data="nav:diagnostics"),
                types.InlineKeyboardButton("üìñ –ü–û–ú–û–©–¨", callback_data="nav:help")
            ]
            
            markup.add(*buttons)
            
            welcome_text = """
ü§ñ TRUCKSERVICE MANAGER 
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üöõ –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó - –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞
‚Ä¢ ‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
‚Ä¢ üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π  
‚Ä¢ üìñ –ü–û–ú–û–©–¨ - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            """
            
            self.bot.send_message(chat_id, welcome_text, reply_markup=markup)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

    def show_sections_menu(self, chat_id: int) -> None:
        """–ï–¥–∏–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤"""
        try:
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            if self.sections:
                for section_id, section_data in self.sections.items():
                    markup.add(types.InlineKeyboardButton(
                        section_data['name'],
                        callback_data=f"section_{section_id}"
                    ))
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏
            if self.admin_panel:
                custom_lists = self.admin_panel.get_available_lists()
                for list_name in custom_lists:
                    markup.add(types.InlineKeyboardButton(
                        f"üìÅ {list_name}",
                        callback_data=f"custom_list_{list_name}"
                    ))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="nav:main_menu"))
            
            section_count = len(self.sections) if self.sections else 0
            custom_count = len(self.admin_panel.get_available_lists()) if self.admin_panel else 0
            
            self.bot.send_message(
                chat_id,
                f"üèóÔ∏è –í–´–ë–ï–†–ò–¢–ï –†–ê–ó–î–ï–õ –î–õ–Ø –†–ê–ë–û–¢–´\n\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ:\n"
                f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {section_count}\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏: {custom_count}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞:",
                reply_markup=markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤")

    def show_menu(self, chat_id: int, menu_type: str) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é"""
        if menu_type == 'main_menu':
            self.show_main_menu(chat_id)
        elif menu_type == 'sections_menu':  # ‚Üê –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –¢–ò–ü –î–õ–Ø –†–ê–ó–î–ï–õ–û–í
            self.show_sections_menu(chat_id)
        elif menu_type == 'diagnostics':
            self.show_diagnostics_menu(chat_id)
        elif menu_type == 'help':
            self.show_help(chat_id)
        else:
            self.bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–Ω—é: {menu_type}")
  
    def handle_back(self, chat_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        try:
            self.show_main_menu(chat_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–∞–¥: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    def show_help(self, chat_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        help_text = """
ü§ñ TruckService Manager - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞–º–∏

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/new_order - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="nav:main_menu"))
        
        self.bot.send_message(chat_id, help_text, reply_markup=markup)
    
    def show_diagnostics_menu(self, chat_id: int) -> None:
        """–ú–µ–Ω—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        buttons = [
            types.InlineKeyboardButton("üîç –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê", callback_data="diagnostics_quick"),
            types.InlineKeyboardButton("üìä –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê", callback_data="diagnostics_full"),
            types.InlineKeyboardButton("üìà –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò", callback_data="diagnostics_live"),
            types.InlineKeyboardButton("‚ö†Ô∏è –ü–†–û–ß–ò–¢–ê–¢–¨ –û–®–ò–ë–ö–ò", callback_data="diagnostics_dtc"),
            types.InlineKeyboardButton("üßπ –û–ß–ò–°–¢–ò–¢–¨ –û–®–ò–ë–ö–ò", callback_data="diagnostics_clear"),
            types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="nav:main_menu")
        ]
        
        markup.add(*buttons)
        
        self.bot.send_message(
            chat_id,
            "üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô\n\n"
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ELM327 –∞–¥–∞–ø—Ç–µ—Ä:\n"
            "‚Ä¢ üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "‚Ä¢ üìä –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üìà –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ ‚ö†Ô∏è –ß—Ç–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ - –∫–æ–¥—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n"
            "‚Ä¢ üßπ –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ - —Å–±—Ä–æ—Å –∫–æ–¥–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )