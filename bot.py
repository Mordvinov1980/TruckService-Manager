import telebot
from telebot import types
import pandas as pd
import datetime
import os
import re
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import range_boundaries
import shutil
import pathlib
from dotenv import load_dotenv
import time
from num2words import num2words
import logging
import pickle
from typing import Dict, List, Tuple, Optional, Union, Any

# ‚úÖ –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô
from modules.excel_processor import ExcelProcessor, ExcelProcessingError
from modules.data_repositories import (RepositoryFactory, WorksRepository, MaterialsRepository, 
                                     AccountingRepository, RepositoryError, DataNotFoundError)
from modules.document_factory import DocumentFactory, DocumentCreationError
from modules.admin_panel import AdminPanel
from modules.navigation_manager import NavigationManager  # ‚úÖ –ù–û–í–´–ô –ò–ú–ü–û–†–¢

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

DEBUG_MODE = True
CHAT_ID = "-1003145822387"

# ‚úÖ –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø BOT.PY
class BotProcessingError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞"""
    pass

class SessionError(BotProcessingError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    pass

class FileSystemError(BotProcessingError):
    """–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    pass

class ExcelLoadError(BotProcessingError):
    """–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤"""
    pass

class PhotoProcessingError(BotProcessingError):
    """–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    pass

class TelegramAPIError(BotProcessingError):
    """–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API"""
    pass

class ValidationError(BotProcessingError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class AccountingError(BotProcessingError):
    """–û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    pass


class TruckServiceManagerBot:
    def __init__(self, token: str) -> None:
        self.bot = telebot.TeleBot(token)
        self.excel_processor = ExcelProcessor()
        self.document_factory = DocumentFactory(self.excel_processor)
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        self.chat_id = CHAT_ID
        
        # ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–´ –°–ò–°–¢–ï–ú–´
        self.WORKS_PER_PAGE = 8
        self.MATERIALS_PER_PAGE = 8
        self.MAX_RETRIES = 3
        self.RETRY_DELAY = 1
        
        self.setup_directories()
        self.setup_logging()
        self.setup_repositories()
        self.setup_handlers()
        self.setup_bot_menu()
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
        self.admin_panel = AdminPanel(self.bot)
        self.admin_panel.excel_processor = self.excel_processor
        
        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ù–û–í–£–Æ –ù–ê–í–ò–ì–ê–¶–ò–Æ
        self.navigation = NavigationManager(self.bot)
        
        # ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –í –ù–ê–í–ò–ì–ê–¶–ò–Æ
        self.navigation.set_dependencies(self.admin_panel, self.excel_processor)
        self.navigation.set_sections(self.sections)
        
        print("ü§ñ TruckService Manager –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π!")

    def setup_repositories(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # ‚úÖ –°–û–ó–î–ê–ï–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ò –ß–ï–†–ï–ó –§–ê–ë–†–ò–ö–£
            self.works_repository: WorksRepository = RepositoryFactory.create_works_repository(
                self.main_folder, self.sections
            )
            self.materials_repository: MaterialsRepository = RepositoryFactory.create_materials_repository(
                self.main_folder
            )
            self.accounting_repository: AccountingRepository = RepositoryFactory.create_accounting_repository(
                self.main_folder, self.sections, self.common_accounting_folder
            )
            
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            raise BotProcessingError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {e}") from e

    def setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        log_file = self.main_folder / "bot_log.txt"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        self.logger = logging.getLogger('TruckServiceBot')

    def setup_bot_menu(self) -> None:
        menu_commands = [
            types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            types.BotCommand("new_order", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥"),
            types.BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
        ]
        try:
            self.bot.set_my_commands(menu_commands)
            print("‚úÖ –ú–µ–Ω—é –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ–Ω—é: {e}")

    def setup_directories(self) -> None:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö - –¢–û–õ–¨–ö–û –û–î–ù–ê –ü–ê–ü–ö–ê –®–ê–ë–õ–û–ù–´"""
        try:
            desktop = pathlib.Path.home() / "Desktop"
            self.main_folder = desktop / "TruckService_Manager"
            
            # –û–°–ù–û–í–ù–´–ï –ü–ê–ü–ö–ò
            essential_folders = [
                self.main_folder,
                self.main_folder / "–®–∞–±–ª–æ–Ω—ã",
                self.main_folder / "–û–±—â–∏–π_—É—á–µ—Ç",
                self.main_folder / "–õ–æ–≥–∏"
            ]
            
            for folder in essential_folders:
                folder.mkdir(exist_ok=True)
            
            self.sections: Dict[str, Dict[str, Any]] = {
                'base': {
                    'name': 'üìã –¢–∏–ø–æ–≤–æ–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥',
                    'folder': self.main_folder / "–¢–∏–ø–æ–≤–æ–π_–∑–∞–∫–∞–∑",
                    'works_file': "works_list_base.xlsx"
                }
            }
            
            # –ü–ê–ü–ö–ò –†–ê–ó–î–ï–õ–û–í
            for section_id, section_data in self.sections.items():
                section_folders = [
                    section_data['folder'],
                    section_data['folder'] / "–ó–∞–∫–∞–∑—ã", 
                    section_data['folder'] / "–£—á–µ—Ç",
                    section_data['folder'] / "–§–æ—Ç–æ",
                    section_data['folder'] / "cache"
                ]
                
                for folder in section_folders:
                    folder.mkdir(parents=True, exist_ok=True)
                
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è: {section_data['name']}")
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï common_accounting_folder
            self.common_accounting_folder = self.main_folder / "–û–±—â–∏–π_—É—á–µ—Ç"
            self.common_accounting_folder.mkdir(exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –æ–±—â–µ–≥–æ —É—á–µ—Ç–∞: {self.common_accounting_folder}")
            
        except Exception as e:
            raise FileSystemError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫: {e}") from e

    def setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message: types.Message) -> None:
            """–ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é"""
            try:
                chat_id = message.chat.id
                print(f"üîç DEBUG: /start –æ—Ç chat_id={chat_id}")
                
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ù–ê–í–ò–ì–ê–¶–ò–Æ
                self.navigation.show_main_menu(chat_id)
                
            except Exception as e:
                self._handle_critical_error(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

        @self.bot.message_handler(commands=['help'])
        def send_help(message: types.Message) -> None:
            try:
                self.navigation.show_help(message.chat.id)
            except Exception as e:
                self._handle_critical_error(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏: {e}")

        @self.bot.message_handler(commands=['new_order'])
        def start_new_order(message: types.Message) -> None:
            try:
                chat_id = message.chat.id
                if chat_id in self.user_sessions and 'section' in self.user_sessions[chat_id]:
                    self.user_sessions[chat_id].update({
                        'step': 'license_plate',
                        'selected_works': [],
                        'selected_materials': [],
                        'current_page': 0
                    })
                    
                    section_name = self.sections[self.user_sessions[chat_id]['section']]['name']
                    self.bot.send_message(
                        chat_id,
                        f"üèóÔ∏è {section_name}\n\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n–ü—Ä–∏–º–µ—Ä: –ê123–í–°77 –∏–ª–∏ 1234–ê–í"
                    )
                else:
                    self.navigation.show_sections_menu(chat_id)  # ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –ó–î–ï–°–¨ (–±—ã–ª–æ show_quick_order_menu)
            except Exception as e:
                self._handle_critical_error(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")

        @self.bot.message_handler(content_types=['photo'])
        def handle_photos(message: types.Message) -> None:
            try:
                chat_id = message.chat.id
                
                if chat_id not in self.user_sessions:
                    return
                    
                session = self.user_sessions[chat_id]
                
                if session.get('step') == 'waiting_photos':
                    if 'processing' in session and session['processing']:
                        return
                    
                    session['processing'] = True
                    
                    try:
                        if 'photo_file_ids' not in session:
                            session['photo_file_ids'] = []
                        
                        file_id = message.photo[-1].file_id
                        
                        if file_id not in session['photo_file_ids']:
                            session['photo_file_ids'].append(file_id)
                            
                            file_info = self.bot.get_file(file_id)
                            downloaded_file = self.bot.download_file(file_info.file_path)
                            
                            photo_index = len(session['photo_file_ids'])
                            
                            # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–ê–ü–ö–£ –†–ê–ó–î–ï–õ–ê
                            if session['section'].startswith('custom_'):
                                section_folder = pathlib.Path("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_—Å–ø–∏—Å–∫–∏") / session['custom_list']
                            else:
                                section_folder = self.sections[session['section']]['folder']

                            photos_folder = section_folder / "–§–æ—Ç–æ"
                            
                            photo_filename = f"{session['license_plate']}_{session.get('order_number', '000')}_{photo_index}.jpg"
                            photo_path = photos_folder / photo_filename
                            
                            with open(photo_path, 'wb') as new_file:
                                new_file.write(downloaded_file)
                            
                            print(f"‚úÖ –§–æ—Ç–æ {photo_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_filename}")
                        
                        current_count = len(session['photo_file_ids'])
                        
                        photo_names = ["–°–ü–ï–†–ï–î–ò", "–°–ü–†–ê–í–ê", "–°–õ–ï–í–ê"]
                        
                        if current_count < 3:
                            self.bot.send_message(
                                chat_id,
                                f"‚úÖ –§–æ—Ç–æ {current_count} ({photo_names[current_count-1]}) –ø–æ–ª—É—á–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ {current_count + 1} ({photo_names[current_count]}):"
                            )
                        else:
                            self.bot.send_message(chat_id, "‚úÖ –í—Å–µ 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã! –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...")
                            time.sleep(1)
                            self.finalize_order_with_photos(chat_id)
                            
                    except Exception as e:
                        raise PhotoProcessingError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}") from e
                    finally:
                        session['processing'] = False
                        
            except PhotoProcessingError as e:
                self._handle_photo_error(message.chat.id, str(e))
            except Exception as e:
                self._handle_critical_error(message.chat.id, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

        # ‚úÖ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –¢–ï–ö–°–¢–ê –ò –î–û–ö–£–ú–ï–ù–¢–û–í
        @self.bot.message_handler(content_types=['text', 'document'])
        def handle_all_messages(message: types.Message) -> None:
            """–£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
            try:
                chat_id = message.chat.id
                print(f"üîç DEBUG handle_all_messages: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}")
                
                # ‚úÖ –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
                if message.content_type == 'document' and hasattr(self, 'admin_panel') and self.admin_panel.is_awaiting_excel(message):
                    print(f"üîç DEBUG: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç Excel –¥–æ–∫—É–º–µ–Ω—Ç")
                    await_type = self.admin_panel.awaiting_input_users.get(chat_id, '')
                    print(f"üîç DEBUG: –¢–∏–ø –æ–∂–∏–¥–∞–Ω–∏—è: '{await_type}'")
                    
                    if 'add_excel_file:' in await_type:
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_excel_file_sync")
                        self.admin_panel.handle_add_excel_file_sync(message)
                        return
                    elif 'excel_file:' in await_type:
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_excel_file_sync")
                        self.admin_panel.handle_excel_file_sync(message)
                        return
                
                elif message.content_type == 'text' and hasattr(self, 'admin_panel') and self.admin_panel.is_awaiting_input(message):
                    print(f"üîç DEBUG: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")
                    await_type = self.admin_panel.awaiting_input_users.get(chat_id, '')
                    print(f"üîç DEBUG: –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–∏–ø–∞: '{await_type}'")
                
                    # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –®–ê–ë–õ–û–ù–û–í –ò –°–ü–ò–°–ö–û–í
                    if await_type == 'add_list_name':
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_list_name_sync")
                        self.admin_panel.handle_add_list_name_sync(message)
                        return
                    elif await_type == 'add_template_id':
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_id_sync")
                        self.admin_panel.handle_add_template_id_sync(message)
                        return
                    elif await_type.startswith('add_template_name:'):
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_name_sync")
                        self.admin_panel.handle_add_template_name_sync(message)
                        return
                    elif await_type.startswith('add_template_company:'):
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_company_sync")
                        self.admin_panel.handle_add_template_company_sync(message)
                        return
                    elif await_type.startswith('add_template_address:'):
                        print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_address_sync")
                        self.admin_panel.handle_add_template_address_sync(message)
                        return
                    else:
                        print(f"üîç DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∂–∏–¥–∞–Ω–∏—è: '{await_type}'")
                
                # ‚úÖ –í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û–°–ù–û–í–ù–û–ô –ë–û–¢
                if message.content_type == 'text':
                    self.process_user_input(message)
                else:
                    print(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {message.document.file_name if message.document else 'N/A'}")
                    
            except Exception as e:
                self._handle_critical_error(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # ‚úÖ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• CALLBACK
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('nav:'))
        def handle_navigation_callbacks(call: types.CallbackQuery) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö callback (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
            try:
                chat_id = call.message.chat.id
                action = call.data.replace('nav:', '')
                
                print(f"üîç DEBUG: –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π callback: {action} –æ—Ç chat_id={chat_id}")
                
                if action == 'back':
                    self.navigation.handle_back(chat_id)
                elif action == 'main_menu':
                    self.navigation.show_main_menu(chat_id)
                elif action == 'sections_menu':  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
                    self.navigation.show_sections_menu(chat_id)
                elif action == 'diagnostics':
                    self.navigation.show_diagnostics_menu(chat_id)
                elif action == 'help':
                    self.navigation.show_help(chat_id)
                else:
                    self.bot.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
                self.bot.answer_callback_query(call.id)
                
            except Exception as e:
                self._handle_critical_error(call.message.chat.id, f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")

        # ‚úÖ –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–¢–ê–Æ–¢–°–Ø –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call: types.CallbackQuery) -> None:
            try:
                self.handle_button_click(call)
            except Exception as e:
                self._handle_critical_error(call.message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

    def _handle_photo_error(self, chat_id: int, error_message: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ç–æ"""
        try:
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑."
            )
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ –≤ chat_id {chat_id}: {error_message}")
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ç–æ: {e}")

    def _handle_critical_error(self, chat_id: int, error_message: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        try:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–û—à–∏–±–∫–∞: {error_message}"
            )
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chat_id {chat_id}: {error_message}")
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")            

    def show_help(self, chat_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.navigation.show_help(chat_id)

    def show_section_selection(self, chat_id: int) -> None:
        """–°–¢–ê–†–´–ô –ú–ï–¢–û–î - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ù–û–í–£–Æ –ù–ê–í–ò–ì–ê–¶–ò–Æ"""
        print(f"üîç DEBUG: show_section_selection –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ sections_menu")
        self.navigation.show_sections_menu(chat_id)  # ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –ó–î–ï–°–¨

    def ask_about_photos(self, chat_id: int) -> None:
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="add_photos_yes"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="add_photos_no")
        )
        
        self.bot.send_message(
            chat_id,
            "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?\n\n‚Ä¢ –î–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 3 —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É (—Å–ø–µ—Ä–µ–¥–∏, —Å–ø—Ä–∞–≤–∞, —Å–ª–µ–≤–∞)\n‚Ä¢ –ù–µ—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ —Ñ–æ—Ç–æ",
            reply_markup=markup
        )

    def request_photos(self, chat_id: int) -> None:
        session = self.user_sessions[chat_id]
        session['step'] = 'waiting_photos'
        session['photo_file_ids'] = []
        session['processing'] = False
        
        self.bot.send_message(
            chat_id,
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ü–û –û–î–ù–û–ú–£ –≤ –ø–æ—Ä—è–¥–∫–µ:\n\n1. üì∑ –°–ü–ï–†–ï–î–ò\n2. üì∑ –°–ü–†–ê–í–ê\n3. üì∑ –°–õ–ï–í–ê\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (–°–ü–ï–†–ï–î–ò):"
        )

    def finalize_order_with_photos(self, chat_id: int) -> None:
        self._finalize_order_common(chat_id, has_photos=True)

    def _finalize_order_common(self, chat_id: int, has_photos: bool = False) -> None:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê - –¢–ï–ü–ï–†–¨ –° –†–ê–ó–î–ï–õ–ï–ù–ò–ï–ú"""
        try:
            if not self._validate_session(chat_id):
                return
                
            session = self.user_sessions[chat_id]
            
            if not self._validate_order_data(session, chat_id):
                return
            
            session['order_finalized'] = True
            
            if not self._validate_calculations(session, chat_id):
                return
            
            # ‚úÖ –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í –ß–ï–†–ï–ó –§–ê–ë–†–ò–ö–£ –î–û–ö–£–ú–ï–ù–¢–û–í
            success = self._create_order_files_with_factory(session, chat_id, "–î–ê" if has_photos else "–ù–ï–¢")
            
            if success:
                # –û–¢–ü–†–ê–í–ö–ê –í –ß–ê–¢
                self._send_to_work_chat(session, has_photos)
                self._show_order_result(chat_id, session, "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã (3 —Ñ–æ—Ç–æ)" if has_photos else "–Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã")
            else:
                self.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞")
            
            # –û–ß–ò–°–¢–ö–ê –°–ï–°–°–ò–ò –î–ê–ñ–ï –ü–†–ò –û–®–ò–ë–ö–ê–•
            self.cleanup_session(chat_id)
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            self.cleanup_session(chat_id)

    def _validate_session(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        if chat_id not in self.user_sessions:
            self.bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return False
            
        session = self.user_sessions[chat_id]
        
        if 'order_finalized' in session and session['order_finalized']:
            self.bot.send_message(chat_id, "‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ")
            return False
            
        return True

    def _validate_order_data(self, session: Dict[str, Any], chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞"""
        required_fields = ['license_plate', 'date', 'order_number', 'workers', 'selected_works']
        for field in required_fields:
            if field not in session or not session[field]:
                self.bot.send_message(chat_id, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {field}")
                return False
        return True

    def _validate_calculations(self, session: Dict[str, Any], chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—É–º–º"""
        try:
            works_total = sum(hours for _, hours in session['selected_works']) * 2500
            materials_total = 375 + 95 + 210 + 120  # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            total_amount = works_total + materials_total
            
            if total_amount <= 0:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
                
            return True
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã: {e}")
            return False

    def cleanup_session(self, chat_id: int) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id in self.user_sessions:
            del self.user_sessions[chat_id]
            print(f"‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è chat_id: {chat_id}")

    def _send_to_work_chat(self, session: Dict[str, Any], has_photos: bool) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç"""
        try:
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–©–ò–ô –ú–ï–¢–û–î –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í –ß–ê–¢
            self._send_order_to_work_chat(session, has_photos)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç: {e}")
            # –ù–ï –ü–†–ï–†–´–í–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–ó-–ó–ê –û–®–ò–ë–ö–ò –û–¢–ü–†–ê–í–ö–ò

    def _send_order_to_work_chat(self, session: Dict[str, Any], has_photos: bool) -> None:
        """–û–ë–©–ò–ô –ú–ï–¢–û–î –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ó–ê–ö–ê–ó–ê –í –†–ê–ë–û–ß–ò–ô –ß–ê–¢ - –° –§–û–¢–û –ò–õ–ò –ë–ï–ó"""
        try:
            # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê
            if session['section'].startswith('custom_'):
                section_name = f"üìÅ {session['custom_list']}"
            else:
                section_name = self.sections[session['section']]['name']

            selected_count = len(session['selected_works'])
            materials_count = len(session.get('selected_materials', []))
            total_hours = sum(hours for _, hours in session['selected_works'])
            
            # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ò–ú–Ø –®–ê–ë–õ–û–ù–ê –®–ê–ü–ö–ò
            template_id = session.get('header_template', 'bridge_town')
            template = self.excel_processor.header_manager.get_template(template_id)
            template_name = template['name'] if template else "–ë—Ä–∏–¥–∂—Ç–∞—É–Ω –§—É–¥—Å"
            
            # –û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –ï–°–õ–ò –ï–°–¢–¨
            if has_photos:
                photo_file_ids = session.get('photo_file_ids', [])
                if photo_file_ids:
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(photo_file_ids)} —Ñ–æ—Ç–æ –≤ —á–∞—Ç")
                    
                    media = []
                    for file_id in photo_file_ids[:3]:
                        media.append(types.InputMediaPhoto(file_id))
                    
                    if media:
                        self.bot.send_media_group(self.chat_id, media)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(media)} —Ñ–æ—Ç–æ –≤ —á–∞—Ç")
            
            # –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï
            text_content = self.create_draft_content(session)
            photo_status = "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã" if has_photos else "–Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã"
            
            chat_message = f"""
üìã –ó–ê–ö–ê–ó-–ù–ê–†–Ø–î ‚Ññ{session.get('order_number', '000')}

{text_content}

üèóÔ∏è –†–∞–∑–¥–µ–ª: {section_name}
üè¢ –®–∞–±–ª–æ–Ω: {template_name}
üìä –†–∞–±–æ—Ç: {selected_count}
üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_count}
‚è±Ô∏è –í—Ä–µ–º—è: {total_hours:.1f} –Ω/—á
üì∏ –§–æ—Ç–æ: {photo_status}

‚úÖ –°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @TSM_Auto_bot
            """
            
            self.bot.send_message(self.chat_id, chat_message)
            print(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç {self.chat_id}, —Ñ–æ—Ç–æ: {photo_status}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —á–∞—Ç: {e}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ

    def _create_order_files_with_factory(self, session: Dict[str, Any], chat_id: int, photos_text: str) -> bool:
        """–°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í –ß–ï–†–ï–ó –§–ê–ë–†–ò–ö–£ –î–û–ö–£–ú–ï–ù–¢–û–í"""
        try:
            # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–£–¢–¨ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
            if session['section'].startswith('custom_'):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–∞–ø–∫—É
                list_name = session['custom_list']
                section_folder = pathlib.Path("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ_—Å–ø–∏—Å–∫–∏") / list_name
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª
                section_id = session['section']
                section_folder = self.sections[section_id]['folder']
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–ê–ë–†–ò–ö–£ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –í–°–ï–• –î–û–ö–£–ú–ï–ù–¢–û–í
            documents = self.document_factory.create_all(session, section_folder)
            
            if not documents:
                raise DocumentCreationError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for doc_type, doc_path in documents.items():
                try:
                    with open(doc_path, 'rb') as doc_file:
                        caption = f"üìÑ {doc_type.upper()} –¥–æ–∫—É–º–µ–Ω—Ç"
                        self.bot.send_document(chat_id, doc_file, caption=caption)
                        print(f"‚úÖ {doc_type} –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {doc_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {doc_type} –¥–æ–∫—É–º–µ–Ω—Ç: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É—á–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è Excel —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            excel_filename = documents.get('excel', pathlib.Path()).name
            accounting_success = self.accounting_repository.save_order(session, excel_filename, photos_text)
            
            return True
            
        except DocumentCreationError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {e}")
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            self.bot.send_message(chat_id, f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def _show_order_result(self, chat_id: int, session: Dict[str, Any], photo_status: str) -> None:
        selected_count = len(session['selected_works'])
        materials_count = len(session.get('selected_materials', []))
        total_hours = sum(hours for _, hours in session['selected_works'])

        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else:
            section_name = self.sections[session['section']]['name']
        
        # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ò–ú–Ø –®–ê–ë–õ–û–Ω–∞ –®–ê–ü–ö–ò
        template_id = session.get('header_template', 'bridge_town')
        template = self.excel_processor.header_manager.get_template(template_id)
        template_name = template['name'] if template else "–ë—Ä–∏–¥–∂—Ç–∞—É–Ω –§—É–¥—Å"
        
        result_text = f"""‚úÖ –ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üèóÔ∏è {section_name}
üè¢ –®–∞–±–ª–æ–Ω: {template_name}

–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
üöó –ì–æ—Å–Ω–æ–º–µ—Ä: {session['license_plate']}
üìÖ –î–∞—Ç–∞: {session['date'].strftime('%d.%m.%Y')}
üî¢ –ù–æ–º–µ—Ä –ó–ù: {session.get('order_number', '000')}
üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {session['workers']}

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üìä –í—ã–±—Ä–∞–Ω–æ —Ä–∞–±–æ—Ç: {selected_count}
üì¶ –í—ã–±—Ä–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_count}
‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.1f} –Ω/—á
üì∏ –§–æ—Ç–æ: {photo_status}

üí¨ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç

–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_order
        """
        
        self.bot.send_message(chat_id, result_text)

    def validate_license_plate(self, text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not text or len(text) < 2:
            return False
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤
        patterns = [
            r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{1}\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: –ê123–í–°77
            r'^\d{4}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$',  # –§–æ—Ä–º–∞—Ç: 1234–ê–í77
            r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{3}\d{2,3}$',  # –§–æ—Ä–º–∞—Ç: –ê–ê12377
        ]
        
        text_upper = text.upper().replace(' ', '')
        
        for pattern in patterns:
            if re.match(pattern, text_upper):
                return True
                
        return False

    def validate_date(self, text: str) -> Tuple[bool, Union[datetime.datetime, str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã - –†–ê–ó–†–ï–®–ê–ï–ú –ë–£–î–£–©–ò–ï –î–ê–¢–´"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            formats = ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y', '%Y.%m.%d', '%Y/%m/%d', '%Y-%m-%d']
            
            for fmt in formats:
                try:
                    date_obj = datetime.datetime.strptime(text.strip(), fmt)
                    # ‚úÖ –£–ë–ò–†–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –ë–£–î–£–©–ï–ï - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –¥–∞—Ç—ã
                    return True, date_obj
                except ValueError:
                    continue
                    
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}"

    def validate_order_number(self, text: str) -> Tuple[bool, Union[str, str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            text_clean = text.strip()
            
            if not text_clean:
                return False, "‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                
            if not text_clean.isdigit():
                return False, "‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
                
            if len(text_clean) > 10:
                return False, "‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
                
            return True, text_clean
            
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: {e}"

    def validate_workers(self, text: str) -> Tuple[bool, Union[str, str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        try:
            text_clean = text.strip()
            
            if not text_clean:
                return False, "‚ùå –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                
            if len(text_clean) < 2:
                return False, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
                
            if len(text_clean) > 200:
                return False, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if re.search(r'[<>{}[\]~]', text_clean):
                return False, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
                
            return True, text_clean
            
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}"

    def process_user_input(self, message: types.Message) -> None:
        """–û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –¢–ï–ü–ï–†–¨ –° –†–û–£–¢–ò–ù–ì–û–ú"""
        print(f"üîç DEBUG process_user_input: –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{message.text}' –æ—Ç {message.chat.id}")
        chat_id = message.chat.id
        
        # üîß –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–ø–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if hasattr(self, 'admin_panel') and self.admin_panel.is_awaiting_input(message):
            print(f"üîç DEBUG: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é")
            await_type = self.admin_panel.awaiting_input_users.get(chat_id, '')
            print(f"üîç DEBUG: –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–∏–ø–∞: '{await_type}'")
        
            # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –®–ê–ë–õ–û–ù–û–í –ò –°–ü–ò–°–ö–û–í
            if await_type == 'add_list_name':
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_list_name_sync")
                self.admin_panel.handle_add_list_name_sync(message)
                return
            elif await_type == 'add_template_id':
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_id_sync")
                self.admin_panel.handle_add_template_id_sync(message)
                return
            elif await_type.startswith('add_template_name:'):
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_name_sync")
                self.admin_panel.handle_add_template_name_sync(message)
                return
            elif await_type.startswith('add_template_company:'):
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_company_sync")
                self.admin_panel.handle_add_template_company_sync(message)
                return
            elif await_type.startswith('add_template_address:'):
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_address_sync")
                self.admin_panel.handle_add_template_address_sync(message)
                return
            else:
                print(f"üîç DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∂–∏–¥–∞–Ω–∏—è: '{await_type}'")
            return
        
        if chat_id not in self.user_sessions:
            self.bot.send_message(chat_id, "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        session = self.user_sessions[chat_id]
        current_step = session.get('step')
        
        # ‚úÖ –†–û–£–¢–ò–ù–ì –ü–û –®–ê–ì–ê–ú - –ö–ê–ñ–î–´–ô –®–ê–ì –í –°–í–û–ï–ú –ú–ï–¢–û–î–ï
        step_handlers = {
            'license_plate': self._handle_license_plate_input,
            'date': self._handle_date_input, 
            'order_number': self._handle_order_number_input,
            'workers': self._handle_workers_input
        }
        
        if current_step in step_handlers:
            step_handlers[current_step](message, session)
        else:
            self.bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ —Å /start")

    def _handle_license_plate_input(self, message: types.Message, session: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Å–Ω–æ–º–µ—Ä–∞"""
        if self.validate_license_plate(message.text):
            session['license_plate'] = message.text.upper()
            session['step'] = 'date'
            self.ask_date(message.chat.id)
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ—Å–Ω–æ–º–µ—Ä–∞!\n\n–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n‚Ä¢ –ê123–í–°77\n‚Ä¢ 1234–ê–í\n‚Ä¢ –í567–û–†177\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )

    def _handle_date_input(self, message: types.Message, session: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã"""
        is_valid, result = self.validate_date(message.text)
        if is_valid:
            session['date'] = result
            session['step'] = 'order_number'
            self.ask_order_number(message.chat.id)
        else:
            self.bot.send_message(message.chat.id, result)

    def _handle_order_number_input(self, message: types.Message, session: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        is_valid, result = self.validate_order_number(message.text)
        if is_valid:
            session['order_number'] = result
            session['step'] = 'workers'
            self.ask_workers(message.chat.id)
        else:
            self.bot.send_message(message.chat.id, result)

    def _handle_workers_input(self, message: types.Message, session: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        is_valid, result = self.validate_workers(message.text)
        if is_valid:
            session['workers'] = result
            session['step'] = 'selecting_works'
            session['current_page'] = 0
            self.show_works_selection(message.chat.id)
        else:
            self.bot.send_message(message.chat.id, result)

    def ask_license_plate(self, chat_id: int) -> None:
        """–ó–∞–ø—Ä–æ—Å –≥–æ—Å–Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à–∞–ø–∫–∏"""
        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        session = self.user_sessions[chat_id]
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"
        else:
            section_name = self.sections[session['section']]['name']
            
        self.bot.send_message(
            chat_id,
            f"üèóÔ∏è {section_name}\n\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n–ü—Ä–∏–º–µ—Ä: –ê123–í–°77 –∏–ª–∏ 1234–ê–í"
        )

    def ask_date(self, chat_id: int) -> None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        
        today = datetime.date.today()
        dates = [
            today.strftime('%d.%m.%Y'),
            (today + datetime.timedelta(days=1)).strftime('%d.%m.%Y'),
            (today + datetime.timedelta(days=2)).strftime('%d.%m.%Y')
        ]
        
        for date in dates:
            markup.add(date)
            
        self.bot.send_message(
            chat_id,
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=markup
        )

    def ask_order_number(self, chat_id: int) -> None:
        markup = types.ReplyKeyboardRemove()
        self.bot.send_message(
            chat_id,
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞:\n–ü—Ä–∏–º–µ—Ä: 575",
            reply_markup=markup
        )

    def ask_workers(self, chat_id: int) -> None:
        self.bot.send_message(
            chat_id,
            "üë• –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä–æ–≤"
        )

    def ask_header_selection(self, chat_id: int) -> None:
        """‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —à–∞–ø–∫–∏ –ü–û–°–õ–ï –í–´–ë–û–†–ê –†–ê–ó–î–ï–õ–ê"""
        try:
            templates = self.excel_processor.header_manager.get_available_templates()
            
            if not templates:
                # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                session = self.user_sessions[chat_id]
                session['header_template'] = 'bridge_town'
                self.ask_license_plate(chat_id)  # ‚úÖ –ü–ï–†–ï–•–û–î –ö –í–í–û–î–£ –î–ê–ù–ù–´–•
                return
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for template in templates:
                markup.add(types.InlineKeyboardButton(
                    template['name'],
                    callback_data=f"header_{template['id']}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            markup.add(types.InlineKeyboardButton(
                "üè¢ –ë—Ä–∏–¥–∂—Ç–∞—É–Ω –§—É–¥—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
                callback_data="header_bridge_town"
            ))
            
            self.bot.send_message(
                chat_id,
                "üè¢ –í–´–ë–ï–†–ò–¢–ï –®–ê–ë–õ–û–ù –®–ê–ü–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é-–∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞:",
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–ø–∫–∏: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            session = self.user_sessions[chat_id]
            session['header_template'] = 'bridge_town'
            self.ask_license_plate(chat_id)

    def show_works_selection(self, chat_id: int, page: int = 0) -> None:
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –í–´–ë–û–†–ê –†–ê–ë–û–¢ –ë–ï–ó –ö–ù–û–ü–ö–ò –í–´–ë–û–†–ê –®–ê–ü–ö–ò"""
        session = self.user_sessions[chat_id]
        session['current_page'] = page
        
        works = session.get('works', [])
        
        if not works:
            self.bot.send_message(
                chat_id,
                "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—É—Å—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª Excel –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£
        start_index = page * self.WORKS_PER_PAGE
        end_index = start_index + self.WORKS_PER_PAGE
        current_works = works[start_index:end_index]
        
        selected_count = len(session['selected_works'])
        total_hours = sum(hours for _, hours in session['selected_works'])
        total_cost = total_hours * 2500
        total_pages = (len(works) + self.WORKS_PER_PAGE - 1) // self.WORKS_PER_PAGE
        
        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else:
            section_name = self.sections[session['section']]['name']
        
        text = f"üèóÔ∏è {section_name}\n\n"
        text += f"üìã –í—ã–±–æ—Ä —Ä–∞–±–æ—Ç (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
        text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count} —Ä–∞–±–æ—Ç\n"
        text += f"‚è±Ô∏è –í—Ä–µ–º—è: {total_hours:.1f} –Ω/—á\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: {total_cost:,.0f} —Ä—É–±.\n\n"
        text += "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—ã:\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, (name, hours) in enumerate(current_works):
            global_index = start_index + i
            is_selected = (name, hours) in session['selected_works']
            icon = "‚úÖ" if is_selected else "‚ö™"
            cost = hours * 2500
            short_name = name[:35] + "..." if len(name) > 38 else name
            button_text = f"{icon} {short_name} ({hours}—á - {cost:,.0f}—Ä)"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"work_{global_index}"))
        
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_works_{page-1}"))
        
        navigation_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_works_{page+1}"))
        
        if navigation_buttons:
            markup.row(*navigation_buttons)
        
        action_buttons = []
        if selected_count > 0:
            # ‚úÖ –£–ë–†–ê–ù–ê –ö–ù–û–ü–ö–ê "–í—ã–±—Ä–∞—Ç—å —à–∞–ø–∫—É" - —à–∞–ø–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ
            action_buttons.append(types.InlineKeyboardButton("üì¶ –ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="select_materials"))
            action_buttons.append(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="reset_works"))
        else:
            # ‚úÖ –£–ë–†–ê–ù–ê –ö–ù–û–ü–ö–ê "–í—ã–±—Ä–∞—Ç—å —à–∞–ø–∫—É" - —à–∞–ø–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ
            action_buttons.append(types.InlineKeyboardButton("üì¶ –ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="select_materials"))
        
        markup.row(*action_buttons)
        
        self.bot.send_message(chat_id, text, reply_markup=markup)        

    def show_materials_selection(self, chat_id: int, page: int = 0) -> None:
        """–ò–ù–¢–ï–†–§–ï–ò–° –í–´–ë–û–†–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í"""
        session = self.user_sessions[chat_id]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if 'materials' not in session:
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –í–ú–ï–°–¢–û –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê
            materials = self.materials_repository.get_materials()
            session['materials'] = materials
        else:
            materials = session['materials']
        
        if not materials:
            # –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
            self.bot.send_message(chat_id, "üì¶ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—É—Å—Ç. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
            self.ask_about_photos(chat_id)
            return
        
        session['current_materials_page'] = page
        
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£
        start_index = page * self.MATERIALS_PER_PAGE
        end_index = start_index + self.MATERIALS_PER_PAGE
        current_materials = materials[start_index:end_index]
        
        selected_count = len(session.get('selected_materials', []))
        total_pages = (len(materials) + self.MATERIALS_PER_PAGE - 1) // self.MATERIALS_PER_PAGE
        
        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else:
            section_name = self.sections[session['section']]['name']
        
        text = f"üèóÔ∏è {section_name}\n\n"
        text += f"üì¶ –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
        text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, material_name in enumerate(current_materials):
            global_index = start_index + i
            is_selected = material_name in session.get('selected_materials', [])
            icon = "‚úÖ" if is_selected else "‚ö™"
            short_name = material_name[:35] + "..." if len(material_name) > 38 else material_name
            button_text = f"{icon} {short_name}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"material_{global_index}"))
        
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_materials_{page-1}"))
        
        navigation_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_materials_{page+1}"))
        
        if navigation_buttons:
            markup.row(*navigation_buttons)
        
        action_buttons = []
        if selected_count > 0:
            action_buttons.append(types.InlineKeyboardButton("üì∏ –î–∞–ª–µ–µ –∫ —Ñ–æ—Ç–æ", callback_data="create_order"))
            action_buttons.append(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="reset_materials"))
        else:
            action_buttons.append(types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="skip_materials"))
            action_buttons.append(types.InlineKeyboardButton("üì∏ –î–∞–ª–µ–µ –∫ —Ñ–æ—Ç–æ", callback_data="create_order"))
        
        markup.row(*action_buttons)
        
        self.bot.send_message(chat_id, text, reply_markup=markup)

    def update_works_message(self, message: types.Message, session: Dict[str, Any]) -> None:
        chat_id = message.chat.id
        page = session.get('current_page', 0)
        
        works = session.get('works', [])
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£
        start_index = page * self.WORKS_PER_PAGE
        end_index = start_index + self.WORKS_PER_PAGE
        current_works = works[start_index:end_index]
        
        selected_count = len(session['selected_works'])
        total_hours = sum(hours for _, hours in session['selected_works'])
        total_cost = total_hours * 2500
        total_pages = (len(works) + self.WORKS_PER_PAGE - 1) // self.WORKS_PER_PAGE
        
        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else:
            section_name = self.sections[session['section']]['name']
        
        text = f"üèóÔ∏è {section_name}\n\n"
        text += f"üìã –í—ã–±–æ—Ä —Ä–∞–±–æ—Ç (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
        text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count} —Ä–∞–±–æ—Ç\n"
        text += f"‚è±Ô∏è –í—Ä–µ–º—è: {total_hours:.1f} –Ω/—á\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: {total_cost:,.0f} —Ä—É–±.\n\n"
        text += "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—ã:\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, (name, hours) in enumerate(current_works):
            global_index = start_index + i
            is_selected = (name, hours) in session['selected_works']
            icon = "‚úÖ" if is_selected else "‚ö™"
            cost = hours * 2500
            short_name = name[:35] + "..." if len(name) > 38 else name
            button_text = f"{icon} {short_name} ({hours}—á - {cost:,.0f}—Ä)"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"work_{global_index}"))
        
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_works_{page-1}"))
        
        navigation_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_works_{page+1}"))
        
        if navigation_buttons:
            markup.row(*navigation_buttons)
        
        action_buttons = []
        if selected_count > 0:
            # ‚úÖ –£–ë–†–ê–ù–ê –ö–ù–û–ü–ö–ê "–í—ã–±—Ä–∞—Ç—å —à–∞–ø–∫—É" - —à–∞–ø–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ
            action_buttons.append(types.InlineKeyboardButton("üì¶ –ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="select_materials"))
            action_buttons.append(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="reset_works"))
        else:
            # ‚úÖ –£–ë–†–ê–ù–ê –ö–ù–û–ü–ö–ê "–í—ã–±—Ä–∞—Ç—å —à–∞–ø–∫—É" - —à–∞–ø–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ
            action_buttons.append(types.InlineKeyboardButton("üì¶ –ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="select_materials"))
        
        markup.row(*action_buttons)
        
        try:
            self.bot.edit_message_text(text, chat_id, message.message_id, reply_markup=markup)
        except Exception as e:
            if "message is not modified" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def update_materials_message(self, message: types.Message, session: Dict[str, Any]) -> None:
        chat_id = message.chat.id
        page = session.get('current_materials_page', 0)
        
        materials = session.get('materials', [])
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£
        start_index = page * self.MATERIALS_PER_PAGE
        end_index = start_index + self.MATERIALS_PER_PAGE
        current_materials = materials[start_index:end_index]
        
        selected_count = len(session.get('selected_materials', []))
        total_pages = (len(materials) + self.MATERIALS_PER_PAGE - 1) // self.MATERIALS_PER_PAGE
        
        # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ò–ú–Ø –†–ê–ó–î–ï–õ–ê: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        if session['section'].startswith('custom_'):
            section_name = f"üìÅ {session['custom_list']}"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        else:
            section_name = self.sections[session['section']]['name']
        
        text = f"üèóÔ∏è {section_name}\n\n"
        text += f"üì¶ –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
        text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, material_name in enumerate(current_materials):
            global_index = start_index + i
            is_selected = material_name in session.get('selected_materials', [])
            icon = "‚úÖ" if is_selected else "‚ö™"
            short_name = material_name[:35] + "..." if len(material_name) > 38 else material_name
            button_text = f"{icon} {short_name}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"material_{global_index}"))
        
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_materials_{page-1}"))
        
        navigation_buttons.append(types.InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            navigation_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_materials_{page+1}"))
        
        if navigation_buttons:
            markup.row(*navigation_buttons)
        
        action_buttons = []
        if selected_count > 0:
            action_buttons.append(types.InlineKeyboardButton("üì∏ –î–∞–ª–µ–µ –∫ —Ñ–æ—Ç–æ", callback_data="create_order"))
            action_buttons.append(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="reset_materials"))
        else:
            action_buttons.append(types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="skip_materials"))
            action_buttons.append(types.InlineKeyboardButton("üì∏ –î–∞–ª–µ–µ –∫ —Ñ–æ—Ç–æ", callback_data="create_order"))
        
        markup.row(*action_buttons)
        
        try:
            self.bot.edit_message_text(text, chat_id, message.message_id, reply_markup=markup)
        except Exception as e:
            if "message is not modified" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def create_draft_content(self, session: Dict[str, Any]) -> str:
        content = []
        content.append(f"{session['license_plate']} / {session['date'].strftime('%d.%m.%Y')}")
        content.append(session['workers'])
        content.append("")
        
        content.append("–†–ê–ë–û–¢–´:")
        for name, hours in session['selected_works']:
            content.append(f"‚Ä¢ {name}")
        
        if session.get('selected_materials'):
            content.append("")
            content.append("–ú–ê–¢–ï–†–ò–ê–õ–´:")
            for material in session['selected_materials']:
                content.append(f"‚Ä¢ {material}")
        
        return '\n'.join(content)

    def handle_button_click(self, call: types.CallbackQuery) -> None:
        chat_id = call.message.chat.id
        data = call.data
        
        print(f"üîç DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å data='{data}', chat_id={chat_id}")

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–í–°–ï –í–ú–ï–°–¢–ï –í –ù–ê–ß–ê–õ–ï)
        if data == 'admin_panel':
            self.bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")
            self.admin_panel.show_admin_panel_sync(call)
            return

        if data == 'admin_add_list':
            self.bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫...")
            self.admin_panel.handle_add_list_start_sync(call)
            return

        if data == 'admin_back':
            self.bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...")
            self.navigation.show_main_menu(chat_id)
            return

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê–ú–ò
        if data == 'admin_manage_templates':
            self.bot.answer_callback_query(call.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏...")
            self.admin_panel.show_templates_management_sync(call)
            return

        if data == 'admin_add_template':
            print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º handle_add_template_start_sync –¥–ª—è admin_add_template")
            self.bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω...")
            self.admin_panel.handle_add_template_start_sync(call)
            return

        if data == 'admin_refresh_templates':
            self.bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤...")
            self.admin_panel.show_templates_management_sync(call)
            return

        if data == 'admin_back_to_main':
            self.bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...")
            self.admin_panel.show_admin_panel_sync(call)
            return

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
        if data.startswith('admin_view_template:'):
            template_id = data.replace('admin_view_template:', '')
            self.bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ...")
            self.admin_panel.handle_view_template_sync(call, template_id)
            return

        if data.startswith('admin_delete_template:'):
            template_id = data.replace('admin_delete_template:', '')
            self.bot.answer_callback_query(call.id, "–£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω...")
            self.admin_panel.handle_delete_template_sync(call, template_id)
            return

        if data.startswith('admin_edit_template:'):
            template_id = data.replace('admin_edit_template:', '')
            self.bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...")
            self.bot.send_message(chat_id, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")
            return

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ü–ò–°–ö–ê–ú–ò
        if data == 'admin_manage_lists':
            self.bot.answer_callback_query(call.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏...")
            self.admin_panel.show_lists_management_sync(call)
            return

        if data.startswith('admin_view_list:'):
            list_name = data.replace('admin_view_list:', '')
            self.bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ...")
            self.admin_panel.handle_view_list_sync(call, list_name)
            return

        if data.startswith('admin_delete_list:'):
            list_name = data.replace('admin_delete_list:', '')
            self.bot.answer_callback_query(call.id, "–£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
            self.admin_panel.handle_delete_list_sync(call, list_name)
            return

        if data == 'admin_refresh_lists':
            self.bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏...")
            self.admin_panel.show_lists_management_sync(call)
            return

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –®–ê–ü–ö–ò - –£–î–ê–õ–ï–ù –ò–ó –ò–ù–¢–ï–†–§–ï–ô–°–ê –†–ê–ë–û–¢
        # if data == 'select_header':  # ‚ùå –£–î–ê–õ–ï–ù–û - —à–∞–ø–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –®–ê–ë–õ–û–ù–ê –®–ê–ü–ö–ò
        if data.startswith('header_'):
            template_id = data.replace('header_', '')
            
            if chat_id not in self.user_sessions:
                self.bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
                return
                
            session = self.user_sessions[chat_id]
            session['header_template'] = template_id
            session['step'] = 'license_plate'  # ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –®–ê–ì –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê
            
            template = self.excel_processor.header_manager.get_template(template_id)
            template_name = template['name'] if template else "–ë—Ä–∏–¥–∂—Ç–∞—É–Ω –§—É–¥—Å"
            
            self.bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {template_name}")
            
            # ‚úÖ –ü–û–°–õ–ï –í–´–ë–û–†–ê –®–ê–ü–ö–ò - –ü–ï–†–ï–•–û–î –ö –í–í–û–î–£ –î–ê–ù–ù–´–• –ó–ê–ö–ê–ó–ê
            self.ask_license_plate(chat_id)
            return

        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–ü–ò–°–ö–û–í
        elif data.startswith('custom_list_'):
            list_name = data.replace('custom_list_', '')
            print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ '{list_name}'")
            
            self.bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫: {list_name}")
            
            works = self.admin_panel.load_works_from_custom_list(list_name)
            
            if works:
                self.user_sessions[chat_id] = {
                    'section': f'custom_{list_name}',
                    'custom_list': list_name,
                    'step': 'selecting_header',  # ‚úÖ –ù–û–í–´–ô –®–ê–ì - –≤—ã–±–æ—Ä —à–∞–ø–∫–∏
                    'selected_works': [],
                    'selected_materials': [],
                    'current_page': 0,
                    'works': works
                }
                
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –í–ú–ï–°–¢–û –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê
                materials = self.materials_repository.get_materials()
                self.user_sessions[chat_id]['materials'] = materials
                
                print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}'")
                print(f"üîç DEBUG: –†–∞–±–æ—Ç –≤ —Å–µ—Å—Å–∏–∏: {len(works)}")
                print(f"üîç DEBUG: –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: {len(materials)}")
                
                # ‚úÖ –ü–û–°–õ–ï –í–´–ë–û–†–ê –°–ü–ò–°–ö–ê - –°–†–ê–ó–£ –ü–ï–†–ï–•–û–î –ö –í–´–ë–û–†–£ –®–ê–ü–ö–ò
                self.ask_header_selection(chat_id)
            else:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –í —Å–ø–∏—Å–∫–µ '{list_name}' –Ω–µ—Ç —Ä–∞–±–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
                )
            return        
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –†–ê–ó–î–ï–õ–ê
        elif data.startswith('section_'):
            section_id = data.split('_')[1]
            if section_id in self.sections:
                self.bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª: {self.sections[section_id]['name']}")
                
                self.user_sessions[chat_id] = {
                    'section': section_id,
                    'step': 'selecting_header',  # ‚úÖ –ù–û–í–´–ô –®–ê–ì - –≤—ã–±–æ—Ä —à–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –¥–∞–Ω–Ω—ã–º–∏
                    'selected_works': [],
                    'selected_materials': [],
                    'current_page': 0
                }
                
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –í–ú–ï–°–¢–û –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê
                works = self.works_repository.get_works(section_id)
                if not works:
                    self.bot.send_message(
                        chat_id,
                        "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—É—Å—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª Excel –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                self.user_sessions[chat_id]['works'] = works
                
                # ‚úÖ –ü–û–°–õ–ï –í–´–ë–û–†–ê –†–ê–ó–î–ï–õ–ê - –°–†–ê–ó–£ –ü–ï–†–ï–•–û–î –ö –í–´–ë–û–†–£ –®–ê–ü–ö–ò
                self.ask_header_selection(chat_id)
            return
        
        # ‚úÖ –¢–ï–ü–ï–†–¨ –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ò - —Ç–æ–ª—å–∫–æ –¥–ª—è work_, page_, create_order –∏ —Ç.–¥.
        if chat_id not in self.user_sessions:
            self.bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        session = self.user_sessions[chat_id]
        
        if data.startswith('work_'):
            work_index = int(data.split('_')[1])
            works = session.get('works', [])
            if work_index < len(works):
                work = works[work_index]
                
                if work in session['selected_works']:
                    session['selected_works'].remove(work)
                    self.bot.answer_callback_query(call.id, f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {work[0]}")
                else:
                    session['selected_works'].append(work)
                    self.bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {work[0]}")
                
                self.update_works_message(call.message, session)
        
        elif data.startswith('material_'):
            material_index = int(data.split('_')[1])
            materials = session.get('materials', [])
            if material_index < len(materials):
                material = materials[material_index]
                
                if material in session['selected_materials']:
                    session['selected_materials'].remove(material)
                    self.bot.answer_callback_query(call.id, f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {material}")
                else:
                    session['selected_materials'].append(material)
                    self.bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {material}")
                
                self.update_materials_message(call.message, session)
        
        elif data.startswith('page_'):
            page_type = data.split('_')[1]
            page = int(data.split('_')[2])
            try:
                self.bot.delete_message(chat_id, call.message.message_id)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            if page_type == 'works':
                self.show_works_selection(chat_id, page)
            elif page_type == 'materials':
                self.show_materials_selection(chat_id, page)
        
        elif data == 'reset_works':
            session['selected_works'] = []
            self.bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä —Ä–∞–±–æ—Ç —Å–±—Ä–æ—à–µ–Ω")
            self.update_works_message(call.message, session)
            
        elif data == 'reset_materials':
            session['selected_materials'] = []
            self.bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω")
            self.update_materials_message(call.message, session)
            
        elif data == 'select_materials':
            self.bot.answer_callback_query(call.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            self.show_materials_selection(chat_id)
            
        elif data == 'create_order':
            if not session['selected_works']:
                self.bot.answer_callback_query(call.id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É")
                return
            
            self.bot.answer_callback_query(call.id, "–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥...")
            self.ask_about_photos(chat_id)
            
        elif data == 'skip_materials':
            self.bot.answer_callback_query(call.id, "–ò—Å–ø–æ–ª—å–∑—É—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            session['selected_materials'] = []
            self.ask_about_photos(chat_id)
            
        elif data == 'add_photos_yes':
            self.bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É...")
            self.request_photos(chat_id)
            
        elif data == 'add_photos_no':
            self.bot.answer_callback_query(call.id, "–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑ –±–µ–∑ —Ñ–æ—Ç–æ...")
            self._finalize_order_common(chat_id, has_photos=False)            

    def run(self) -> None:
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—é TruckService Manager...")
        try:
            self.bot.infinity_polling(timeout=60, long_polling_timeout=30)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            self.run()

if __name__ == "__main__":
    if BOT_TOKEN:
        bot = TruckServiceManagerBot(BOT_TOKEN)
        bot.run()
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env —Å BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω")