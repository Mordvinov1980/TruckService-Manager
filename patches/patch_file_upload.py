"""
üéØ PATCH-–§–ê–ô–õ: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –†–ê–ë–û–¢ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–±–æ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Telegram
–°–ò–°–¢–ï–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢ (–≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)
"""

import pandas as pd
import tempfile
import os
import logging
import time
import shutil
from typing import Dict, Any, List, Tuple
from telebot import types
import pathlib
from datetime import datetime

class FileUploadPatch:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ç—á –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–±–æ—Ç–∞–º–∏ - –î–û–ë–ê–í–õ–ï–ù–ò–ï –≤–º–µ—Å—Ç–æ –ü–ï–†–ï–ó–ê–ü–ò–°–ò"""
    
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.bot = bot_instance.bot
        self.user_sessions = bot_instance.user_sessions
        self.main_folder = bot_instance.main_folder
        self.sections = bot_instance.sections
        self.logger = logging.getLogger('FileUploadPatch')
        
        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.admin_ids = [1364203895]  # –í–∞—à ID
        
    def apply_patch(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        self._patch_bot_menu()
        self._add_handlers()
        self._patch_show_section_selection()
        
        self.logger.info("‚úÖ FileUploadPatch –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _patch_bot_menu(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        try:
            new_commands = [
                types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                types.BotCommand("new_order", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥"),
                types.BotCommand("upload_works", "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)"),
                types.BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
            ]
            
            self.bot.set_my_commands(new_commands)
            self.logger.info("‚úÖ –ú–µ–Ω—é –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
    
    def _add_handlers(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        
        @self.bot.message_handler(commands=['upload_works'])
        def handle_upload_command(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç"""
            chat_id = message.chat.id
            
            if chat_id not in self.admin_ids:
                self.bot.send_message(chat_id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return
            
            self.show_upload_menu(chat_id)
        
        @self.bot.message_handler(content_types=['document'])
        def handle_document(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
            chat_id = message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
            if (chat_id in self.user_sessions and 
                self.user_sessions[chat_id].get('step') == 'waiting_upload'):
                
                if chat_id not in self.admin_ids:
                    self.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                    return
                
                self.process_uploaded_file(message)
        
        self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    def _patch_show_section_selection(self):
        """–ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ show_section_selection –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏"""
        original_method = self.bot_instance.show_section_selection
        
        def patched_show_section_selection(chat_id: int):
            """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ —Å –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–æ–π"""
            markup = types.InlineKeyboardMarkup()
            
            for section_id, section_data in self.sections.items():
                markup.add(types.InlineKeyboardButton(
                    section_data['name'], 
                    callback_data=f"section_{section_id}"
                ))
            
            if chat_id in self.admin_ids:
                markup.add(types.InlineKeyboardButton("üë®‚Äçüíª –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨", callback_data="admin_panel"))
            
            markup.add(types.InlineKeyboardButton("üêõ DEBUG", callback_data="debug_menu"))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É DEBUG_MODE –∏–∑ –º–æ–¥—É–ª—è bot
            from bot import DEBUG_MODE
            debug_status = "üîß –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –í–ö–õ–Æ–ß–ï–ù" if DEBUG_MODE else "‚öôÔ∏è –†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
            
            self.bot.send_message(
                chat_id,
                f"üè¢ TruckService Manager\n\n{debug_status}\n–ó–∞–∫–∞–∑—ã {'–ù–ï –ë–£–î–£–¢' if DEBUG_MODE else '–ë–£–î–£–¢'} —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —É—á–µ—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç:",
                reply_markup=markup
            )
        
        self.bot_instance.show_section_selection = patched_show_section_selection
        self.logger.info("‚úÖ –ú–µ—Ç–æ–¥ show_section_selection –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def show_upload_menu(self, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        markup = types.InlineKeyboardMarkup()
        
        for section_id, section_data in self.sections.items():
            markup.add(types.InlineKeyboardButton(
                section_data['name'], 
                callback_data=f"upload_section_{section_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        self.bot.send_message(
            chat_id,
            "üì§ **–ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê –†–ê–ë–û–¢**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—ã:\n\n"
            "üîÑ **–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:** –†–∞–±–æ—Ç—ã –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
            "üìã **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**\n"
            "‚Ä¢ Excel —Ñ–∞–π–ª (.xlsx)\n"  
            "‚Ä¢ –°—Ç–æ–ª–±–µ—Ü A: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –°—Ç–æ–ª–±–µ—Ü B: –ù–æ—Ä–º–æ—á–∞—Å—ã (—á–∏—Å–ª–æ)\n"
            "‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏\n\n"
            "üìù **–ü—Ä–∏–º–µ—Ä:**\n"
            "| –ó–∞–º–µ–Ω–∞ —Ñ–∞—Ä—ã | 1.5 |\n"
            "| –û—Å–º–æ—Ç—Ä –¢–°   | 0.4 |",
            reply_markup=markup
        )
    
    def process_uploaded_file(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∏—Å—Ç–µ–º–æ–π –î–û–ë–ê–í–õ–ï–ù–ò–Ø —Ä–∞–±–æ—Ç"""
        chat_id = message.chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
            if chat_id not in self.user_sessions:
                self.user_sessions[chat_id] = {}
            
            session = self.user_sessions[chat_id]
            uploaded_section = session.get('upload_section')
            
            if not uploaded_section:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = self.bot.send_message(chat_id, "üì• –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_info = self.bot.get_file(message.document.file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
                temp_file.write(downloaded_file)
                temp_path = temp_file.name
            
            # –ü–∞—Ä—Å–∏–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            works_data = self.parse_excel_file(temp_path, uploaded_section)
            
            if works_data['valid_count'] == 0:
                os.unlink(temp_path)
                self.bot.edit_message_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.",
                    chat_id, processing_msg.message_id
                )
                return
            
            # üîÑ –û–°–ù–û–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–û–ë–ê–í–õ–Ø–ï–ú —Ä–∞–±–æ—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            merge_result = self.merge_works_with_existing(uploaded_section, works_data['works'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            success = self.save_merged_works_file(merge_result['all_works'], uploaded_section)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_path)
            except:
                pass
            
            if not success:
                self.bot.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ—Ç–∫—Ä—ã—Ç –≤ Excel.",
                    chat_id, processing_msg.message_id
                )
                return
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            self.clear_section_cache(uploaded_section)
            
            # ‚úÖ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ï–°–°–ò–Æ –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –†–ê–ë–û–¢–´
            session.update({
                'step': 'selecting_works',
                'section': uploaded_section,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                'upload_section': None  # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            })
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            try:
                works = self.bot_instance.load_works_from_excel(uploaded_section, use_cache=False)
                session['works'] = works
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            self.send_merge_result_with_navigation(chat_id, works_data, merge_result, uploaded_section)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            self.bot.delete_message(chat_id, processing_msg.message_id)
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="upload_works_menu"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                chat_id, 
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:\n<code>{str(e)}</code>", 
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def merge_works_with_existing(self, section_id: str, new_works: List[Tuple[str, float]]) -> Dict[str, Any]:
        """üîÑ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏"""
        try:
            section_data = self.sections[section_id]
            works_file = section_data['works_file']
            works_path = self.main_folder / "–®–∞–±–ª–æ–Ω—ã" / works_file
            
            existing_works = []
            new_count = 0
            duplicate_count = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
            if works_path.exists():
                try:
                    df_existing = pd.read_excel(works_path)
                    for idx, row in df_existing.iterrows():
                        work_name = str(row.iloc[0]).strip()
                        work_hours = row.iloc[1]
                        
                        if work_name and work_name != 'nan' and pd.notna(work_hours):
                            try:
                                hours = float(work_hours)
                                existing_works.append((work_name, hours))
                            except (ValueError, TypeError):
                                continue
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    existing_works = []
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã)
            existing_names = {name.lower().strip() for name, _ in existing_works}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_new_works = []
            for work_name, hours in new_works:
                if work_name.lower().strip() not in existing_names:
                    unique_new_works.append((work_name, hours))
                    new_count += 1
                    existing_names.add(work_name.lower().strip())  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
                else:
                    duplicate_count += 1
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
            all_works = existing_works + unique_new_works
            
            return {
                'existing_count': len(existing_works),
                'new_count': new_count,
                'duplicate_count': duplicate_count,
                'total_count': len(all_works),
                'all_works': all_works
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
            return {
                'existing_count': 0,
                'new_count': len(new_works),
                'duplicate_count': 0,
                'total_count': len(new_works),
                'all_works': new_works
            }
    
    def save_merged_works_file(self, works: List[Tuple[str, float]], section_id: str, max_retries: int = 3) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        section_data = self.sections[section_id]
        works_file = section_data['works_file']
        save_path = self.main_folder / "–®–∞–±–ª–æ–Ω—ã" / works_file
        
        for attempt in range(max_retries):
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                save_path.parent.mkdir(parents=True, exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
                df = pd.DataFrame(works, columns=['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã', '–ù–æ—Ä–º–æ—á–∞—Å—ã'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
                df.to_excel(save_path, index=False)
                
                # –°–æ–∑–¥–∞–µ–º backup –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
                if attempt == 0 and save_path.exists():
                    backup_path = save_path.parent / f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{works_file}"
                    shutil.copy2(save_path, backup_path)
                    self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω backup: {backup_path}")
                
                self.logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path} (–≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç: {len(works)})")
                return True
                
            except PermissionError:
                if attempt < max_retries - 1:
                    self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    time.sleep(2)
                else:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    return False
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                return False
        
        return False
    
    def clear_section_cache(self, section_id: str):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        try:
            cache_file = self.sections[section_id]['folder'] / "cache" / f"{section_id}_works.pkl"
            if cache_file.exists():
                cache_file.unlink()
                self.logger.info(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞: {section_id}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {e}")
    
    def parse_excel_file(self, file_path: str, section_id: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            df = pd.read_excel(file_path)
            
            if len(df.columns) < 2:
                raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞")
            
            works = []
            valid_count = 0
            errors = []
            
            for idx, row in df.iterrows():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if pd.isna(row.iloc[0]) and (len(row) < 2 or pd.isna(row.iloc[1])):
                        continue
                    
                    work_name = str(row.iloc[0]).strip()
                    work_hours = row.iloc[1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
                    if not work_name or work_name == 'nan' or work_name.lower() in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ä–∞–±–æ—Ç–∞', 'work']:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–æ—á–∞—Å—ã
                    if pd.isna(work_hours):
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx+2}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ—Ä–º–æ—á–∞—Å—ã")
                        continue
                    
                    try:
                        hours = float(work_hours)
                        if hours <= 0:
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx+2}: –Ω–æ—Ä–º–æ—á–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0")
                            continue
                        if hours > 100:  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx+2}: –Ω–æ—Ä–º–æ—á–∞—Å—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (>100)")
                            continue
                    except (ValueError, TypeError):
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx+2}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ä–º–æ—á–∞—Å–æ–≤ '{work_hours}'")
                        continue
                    
                    works.append((work_name, hours))
                    valid_count += 1
                    
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx+2}: {str(e)}")
                    continue
            
            return {
                'works': works,
                'valid_count': valid_count,
                'total_rows': len(df),
                'errors': errors
            }
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
    
    def send_merge_result_with_navigation(self, chat_id: int, works_data: Dict[str, Any], 
                                        merge_result: Dict[str, Any], section_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø —Ä–∞–±–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        section_name = self.sections[section_id]['name']
        
        text = f"üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –†–ê–ë–û–¢</b>\n\n"
        text += f"üèóÔ∏è <b>–†–∞–∑–¥–µ–ª:</b> {section_name}\n"
        text += f"üìà <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫:</b> {works_data['total_rows']}\n"
        text += f"‚úÖ <b>–í–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ñ–∞–π–ª–µ:</b> {works_data['valid_count']}\n\n"
        
        text += f"üîÑ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:</b>\n"
        text += f"‚Ä¢ üìÅ –ë—ã–ª–æ —Ä–∞–±–æ—Ç: {merge_result['existing_count']}\n"
        text += f"‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {merge_result['new_count']}\n"
        text += f"‚Ä¢ üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {merge_result['duplicate_count']}\n"
        text += f"‚Ä¢ üìä –í—Å–µ–≥–æ —Å—Ç–∞–ª–æ: {merge_result['total_count']} —Ä–∞–±–æ—Ç\n"
        
        if works_data['errors']:
            text += f"\n‚ùå <b>–û—à–∏–±–∫–∏ ({len(works_data['errors'])}):</b>\n"
            for error in works_data['errors'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –æ—à–∏–±–∫–∏
                text += f"‚Ä¢ {error}\n"
            if len(works_data['errors']) > 2:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {len(works_data['errors']) - 2} –æ—à–∏–±–æ–∫\n"
        
        if merge_result['new_count'] > 0:
            text += f"\nüìã <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç:</b>\n"
            new_works_start = merge_result['existing_count']
            for work_name, hours in merge_result['all_works'][new_works_start:new_works_start+3]:
                text += f"‚Ä¢ {work_name} ({hours} —á)\n"
        
        text += f"\nüîÑ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b> - –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã!"
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–ò –î–õ–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –†–ê–ë–û–¢–´
        markup = types.InlineKeyboardMarkup()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup.row(
            types.InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"section_{section_id}"),
            types.InlineKeyboardButton("üì§ –ï—â–µ —Ñ–∞–π–ª", callback_data="upload_works_menu")
        )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup.row(
            types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            types.InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        
        self.bot.send_message(
            chat_id, 
            text, 
            parse_mode='HTML',
            reply_markup=markup
        )

def patch_callback_handler(bot_instance):
    """–ü–∞—Ç—á–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    original_handler = bot_instance.handle_button_click
    
    def patched_handle_button_click(call: types.CallbackQuery):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
        chat_id = call.message.chat.id
        data = call.data
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
        if data == 'admin_panel':
            bot_instance.bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...")
            show_admin_panel(bot_instance, chat_id)
            return
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
        elif data == 'upload_works_menu':
            bot_instance.bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏...")
            temp_patch = FileUploadPatch(bot_instance)
            temp_patch.show_upload_menu(chat_id)
            return
        
        elif data == 'admin_stats':
            bot_instance.bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            bot_instance.bot.send_message(
                chat_id,
                "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
                "üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
                "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è:\n"
                "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤\n"
                "‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞\n" 
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º\n"
                "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                parse_mode='HTML'
            )
            return
        
        elif data == 'admin_back':
            bot_instance.bot.answer_callback_query(call.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å...")
            bot_instance.show_section_selection(chat_id)
            return
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
        elif data == 'main_menu':
            bot_instance.bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            bot_instance.show_section_selection(chat_id)
            return
        
        # ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –†–ê–ó–î–ï–õ–ê –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò
        elif data.startswith('upload_section_'):
            section_id = data.split('_')[2]
            temp_patch = FileUploadPatch(bot_instance)
            
            if chat_id in temp_patch.admin_ids and section_id in bot_instance.sections:
                bot_instance.bot.answer_callback_query(call.id, f"–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è {section_id}")
                
                if chat_id not in bot_instance.user_sessions:
                    bot_instance.user_sessions[chat_id] = {}
                
                # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –†–ê–ó–î–ï–õ –í –°–ï–°–°–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ô –†–ê–ë–û–¢–´
                bot_instance.user_sessions[chat_id].update({
                    'step': 'waiting_upload',
                    'upload_section': section_id,
                    'section': section_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
                })
                
                bot_instance.bot.send_message(
                    chat_id,
                    f"üì§ <b>–ó–ê–ì–†–£–ó–ö–ê –î–õ–Ø {bot_instance.sections[section_id]['name']}</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–∞–º–∏.\n"
                    "üîÑ <b>–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:</b> –†–∞–±–æ—Ç—ã –î–û–ë–ê–í–õ–Ø–Æ–¢–°–Ø –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n\n"
                    "üìã –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã | –ù–æ—Ä–º–æ—á–∞—Å—ã\n\n"
                    "‚è≥ –û–∂–∏–¥–∞—é —Ñ–∞–π–ª...",
                    parse_mode='HTML'
                )
                return
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback
        original_handler(call)
    
    bot_instance.handle_button_click = patched_handle_button_click

def show_admin_panel(bot_instance, chat_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    markup = types.InlineKeyboardMarkup()
    
    markup.add(types.InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="upload_works_menu"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
    
    bot_instance.bot.send_message(
        chat_id,
        "üë®‚Äçüíª <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üì§ <b>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—ã</b> - –î–û–ë–ê–í–õ–ï–ù–ò–ï –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=markup,
        parse_mode='HTML'
    )