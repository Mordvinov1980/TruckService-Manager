"""
üöÄ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ë–û–¢–ê –° PATCH-–§–ê–ô–õ–ê–ú–ò
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import sys
import os
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(__file__))

from bot import TruckServiceManagerBot, BOT_TOKEN
from patches.patch_file_upload import FileUploadPatch, patch_callback_handler

class ExperimentalBotRunner:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—á–∞–º–∏"""
    
    def __init__(self):
        self.logger = logging.getLogger('ExperimentalRunner')
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("experimental_log.txt", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
    
    def apply_patches(self, bot_instance):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏"""
        try:
            self.logger.info("üõ†Ô∏è –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏...")
            
            # ‚úÖ –ü–ê–¢–ß 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
            file_upload_patch = FileUploadPatch(bot_instance)
            file_upload_patch.apply_patch()
            
            # ‚úÖ –ü–ê–¢–ß 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            patch_callback_handler(bot_instance)
            
            self.logger.info("‚úÖ –í—Å–µ –ø–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π: {e}")
    
    def run_experimental_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—á–∞–º–∏"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞...")
            
            if not BOT_TOKEN:
                self.logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            bot = TruckServiceManagerBot(BOT_TOKEN)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
            self.apply_patches(bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!")
            bot.run()
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üî¨ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú TRUCKSERVICE MANAGER")
    print("=" * 50)
    print("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("‚Ä¢ üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤")
    print("‚Ä¢ üì§ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–±–æ—Ç–∞–º–∏")
    print("‚Ä¢ üìã –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    print("=" * 50)
    
    runner = ExperimentalBotRunner()
    runner.run_experimental_bot()

if __name__ == "__main__":
    main()