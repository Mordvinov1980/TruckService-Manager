# test_diagnostics_with_simulation.py
import sys
import os
sys.path.append(os.path.dirname(__file__))

from modules.vehicle_diagnostics import VehicleDiagnostics
from modules.diagnostic_repository import DiagnosticRepository

def test_with_simulation():
    """–¢–µ—Å—Ç —Å —Ä–µ–∂–∏–º–æ–º —ç–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    print("üîß –¢–ï–°–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –° –†–ï–ñ–ò–ú–û–ú –≠–ú–£–õ–Ø–¶–ò–ò")
    print("=" * 55)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –†–ï–ñ–ò–ú–ï –≠–ú–£–õ–Ø–¶–ò–ò:")
    diag_sim = VehicleDiagnostics(simulation_mode=True)
    repo = DiagnosticRepository()
    
    if diag_sim.connect():
        print("‚úÖ –†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        vehicle_info = diag_sim.get_vehicle_info()
        live_data = diag_sim.read_live_data()
        dtc_codes = diag_sim.read_dtc_codes()
        
        print(f"üöó VIN: {vehicle_info.get('vin')}")
        print(f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {vehicle_info.get('protocol')}")
        
        print("\nüìä –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò:")
        for param, value_data in live_data.get('parameters', {}).items():
            print(f"   {param}: {value_data['value']} {value_data['units']}")
        
        if dtc_codes.get('count', 0) > 0:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò: {dtc_codes['count']} —à—Ç.")
            for code in dtc_codes.get('codes', []):
                print(f"   {code}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        diagnostic_data = {
            "vehicle_info": vehicle_info,
            "live_data": live_data,
            "dtc_codes": dtc_codes
        }
        repo.save_diagnostic_session(vehicle_info, diagnostic_data)
        print(f"\nüíæ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    print("\n" + "=" * 55)
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    diag_real = VehicleDiagnostics(simulation_mode=False)
    
    if diag_real.connect():
        print("‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        # ... —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ...
    else:
        print("‚ùå –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        print("   (–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∞–¥–∞–ø—Ç–µ—Ä –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
        print("   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ ELM327 –∫ OBD2 —Ä–∞–∑—ä–µ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        print("   2. –í–∫–ª—é—á–∏—Ç–µ –∑–∞–∂–∏–≥–∞–Ω–∏–µ (–¥–≤–∏–≥–∞—Ç–µ–ª—å –º–æ–∂–Ω–æ –Ω–µ –∑–∞–≤–æ–¥–∏—Ç—å)")
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Bluetooth/Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º")

if __name__ == "__main__":
    test_with_simulation()